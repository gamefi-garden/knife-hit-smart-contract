{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x6e5AA65AeC3168C845A65173f0a1a1d20006C4a3",
    "txHash": "0x472e91c7a67b8b037f6351c869c036a2ab8ed218688d0fd1d96f1a0eb1be8920"
  },
  "proxies": [
    {
      "address": "0xadc628d4A1680070e5D07f2f99816dC8c00F13bA",
      "txHash": "0x74756efbc03d57ed5a870ab590ed463dedfa40cac0c4041e35b469e3cee4d36d",
      "kind": "transparent"
    },
    {
      "address": "0x3dA70Fc99EF53e723B4F1F35B612a152FC2d88ad",
      "txHash": "0xcd854e4b2557e1b035229e6b1aab69949bb757d82e6b7ca1d70ce4c962134ac9",
      "kind": "transparent"
    },
    {
      "address": "0xFA28C83B0969861024c6083184b42e664E82de35",
      "txHash": "0xe6d0ec6bf86089dca2ec5c6bfb13fd064af7a503088a98965660bd1cc4ccdf3d",
      "kind": "transparent"
    },
    {
      "address": "0xA38485507EcA06f3a159C35C7Fb9b9624FF07E2F",
      "txHash": "0xb6be35dbc1874b80ebd4f246b99e482dd487bc673123cb1451f4608efbeeb5dd",
      "kind": "transparent"
    },
    {
      "address": "0x4C024E0a25e9Df4E6764e0CAEB97Eb13e807d30B",
      "txHash": "0x37c3265a72a6e44766990419a0f8e4918310a3f33f67ebb0b86a337fe82dc636",
      "kind": "transparent"
    },
    {
      "address": "0xaeb932f290b96A6ba6650f525a022da66d7e63A8",
      "txHash": "0x8f2dde4cd4a9214cb485299f08374128da890f96f97e6ff2361960fa2fbefcea",
      "kind": "transparent"
    },
    {
      "address": "0x98D7249f3Feb141c5B84c50982515bBF41a4A6Db",
      "txHash": "0x75b7dcb344a02e3734f869d0b85271ec16e535a714c8f4f368898f1f47a5e148",
      "kind": "transparent"
    },
    {
      "address": "0x8DAaC37986654F8CA06e92be329055AE191F23DB",
      "txHash": "0x2e248e4f789e8c0aff0c39851a7d1708aa98bf668e179438c3dd148c7a94456e",
      "kind": "transparent"
    },
    {
      "address": "0x262ae9D40D84Db613E6D68A81fAceFD2Ab6941fF",
      "txHash": "0xb32790da321dbeeaa8eb452390e6d2568bbceb3c58c74095f5a61d0e731d842e",
      "kind": "transparent"
    },
    {
      "address": "0xa54A5D1058e2e95cD38a8E914E0432B5bAa83B07",
      "txHash": "0x1ab7b374687959c2bd4ce7b51ba4b02a47327294b06e95615f4167f5d36b0cc8",
      "kind": "transparent"
    },
    {
      "address": "0x747028a9f7Ff5bE22eF938AbC510D147b4d4a762",
      "txHash": "0x1eaf1f521452a2e49f9a65e558a280053d05622d96fd66c0a746b34a73271468",
      "kind": "transparent"
    },
    {
      "address": "0x38eA0E27EA27D0Acc04b8d11797f8715c0FF9821",
      "txHash": "0xa4ed3284f4106e8e6a108f815cbd550e2abc9e4f0728f8c12ff5806b7292807d",
      "kind": "transparent"
    },
    {
      "address": "0xc3733fdA9F70A4bDD8E2a725210dbc349929169F",
      "txHash": "0x89f3398c5f80a6bebc416ca2bccb74d724881e2c677895bbbfc3c26f351ea5a7",
      "kind": "transparent"
    },
    {
      "address": "0xEf3A806DC3A61a060540E292C67078834DD8d900",
      "txHash": "0xe65bbe604a60964fe0d7821c0fb6fe677fc1b1cf07450686f99d1ba8126a42fc",
      "kind": "transparent"
    },
    {
      "address": "0x5a82e345a5a1805014F5c52DEff2bAcA4803549e",
      "txHash": "0x41761d927f4d6326c10ad41271f7673db33d7f9617261e78a25fcdf0370dc990",
      "kind": "transparent"
    },
    {
      "address": "0xf264e814ba97004e629F82af4435D3Fd77C87EE1",
      "txHash": "0x4f590b3825669185591452161a7de6eb588f063c8ba2f7eee96da7f731518e5e",
      "kind": "transparent"
    },
    {
      "address": "0x894CC78cc25dE5BD0159fb6bEa7074DB38a3Ef4C",
      "txHash": "0x57e0cfd245fb56500107490dde80c8b42aea8d2dbb64999280e48ff547f596ae",
      "kind": "transparent"
    },
    {
      "address": "0x916aCA8d3112b889b3DCa2AB0141ef22A567cDfc",
      "txHash": "0x27ad87d0c419da2acfdf40baedf353737807fae60a4bbc0cb7c94b58aac73bb2",
      "kind": "transparent"
    },
    {
      "address": "0x9880503F5259D166D2493C1F49FBc0509f6Cd9c2",
      "txHash": "0x5b941fd540eedb16e52c2318c18cb4fdfdb28dcf5b1295cc14df8d89336d29fa",
      "kind": "transparent"
    },
    {
      "address": "0xc799c9bFfC23A7EdE4a5AA39f52A631E765f5c52",
      "txHash": "0x296a48d7ebef3f13c18a64fb0a4fb6120c80238cbf85e85d8a597b487adaf8b1",
      "kind": "transparent"
    },
    {
      "address": "0x84D8DF10385870C6032D0c31496f432fFADC424F",
      "txHash": "0x8ee56805b178e70ae53c1855df3ce6fc3229b5b021dd6985ec633ddf7012b4b0",
      "kind": "transparent"
    },
    {
      "address": "0xEB41519BBd8b71536dc5CC105bF8Ba067F042F69",
      "txHash": "0x9a7658c24844addf5a6e4bdbed6e4b0dde9396258d58cdad007aa59519690659",
      "kind": "transparent"
    },
    {
      "address": "0x82622Cca3C8CF6a72a8c2034050e48A3C6d47d9A",
      "txHash": "0xf667d8e451808d57ee8d53f66320046a6e8da9bdf6361804cf3786fd41cd39af",
      "kind": "transparent"
    }
  ],
  "impls": {
    "e1d32bb8e8ae5ef295bc4c615bbcbafc7a69957221056b664a936bba69b20d8c": {
      "address": "0x9936467588027225ae311970304591e98Adf04f9",
      "txHash": "0x92c1b02d0f73920f2be317c6edceeaf3274079c24749ec5816d6804084140362",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)2234_storage)",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:14"
          },
          {
            "label": "duelGameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:16"
          },
          {
            "label": "actionTimeLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:17"
          },
          {
            "label": "revelationTimeLimit",
            "offset": 25,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:18"
          },
          {
            "label": "tieBreakScore",
            "offset": 30,
            "slot": "1",
            "type": "t_uint8",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:19"
          },
          {
            "label": "_initialized",
            "offset": 31,
            "slot": "1",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 0,
            "slot": "2",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "53",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "103",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(RspAction)2381)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.RspAction[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(RspAction)2381": {
            "label": "enum RockScissorsPaperLogic.RspAction",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(RspMatchState)2194": {
            "label": "enum IRockScissorsPaperDuel.RspMatchState",
            "members": [
              "Nil",
              "WaitingForActionHash",
              "WaitingForAction",
              "Player_1_Won",
              "Player_2_Won",
              "Drawn",
              "Aborted"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)2234_storage)": {
            "label": "mapping(uint64 => struct IRockScissorsPaperDuel.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)2234_storage": {
            "label": "struct IRockScissorsPaperDuel.RspMatchData",
            "members": [
              {
                "label": "lastPlayer1ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastPlayer2ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_enum(RspAction)2381)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_enum(RspAction)2381)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "round",
                "type": "t_uint16",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "actionTimeLimit",
                "type": "t_uint40",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "revelationTimeLimit",
                "type": "t_uint40",
                "offset": 7,
                "slot": "4"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 12,
                "slot": "4"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player1Score",
                "type": "t_uint16",
                "offset": 20,
                "slot": "5"
              },
              {
                "label": "player2Score",
                "type": "t_uint16",
                "offset": 22,
                "slot": "5"
              },
              {
                "label": "checkpoint",
                "type": "t_uint40",
                "offset": 24,
                "slot": "5"
              },
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 29,
                "slot": "5"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 30,
                "slot": "5"
              },
              {
                "label": "state",
                "type": "t_enum(RspMatchState)2194",
                "offset": 31,
                "slot": "5"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "tieBreakScore",
                "type": "t_uint8",
                "offset": 1,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "4544614a2a197e06aeadf3bda692b53c2d7ce6808000acad1dda51a920ad39ef": {
      "address": "0x060DA189128b1912601adFCe74eC6bed286c832A",
      "txHash": "0x26f36dd1fbef03d0feef1d607fceffb433beb7ae6e9183d711243df9b6db530c",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)2234_storage)",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:14"
          },
          {
            "label": "duelGameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:16"
          },
          {
            "label": "actionTimeLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:17"
          },
          {
            "label": "revelationTimeLimit",
            "offset": 25,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:18"
          },
          {
            "label": "tieBreakScore",
            "offset": 30,
            "slot": "1",
            "type": "t_uint8",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:19"
          },
          {
            "label": "_initialized",
            "offset": 31,
            "slot": "1",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 0,
            "slot": "2",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "53",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "103",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(RspAction)2381)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.RspAction[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(RspAction)2381": {
            "label": "enum RockScissorsPaperLogic.RspAction",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(RspMatchState)2194": {
            "label": "enum IRockScissorsPaperDuel.RspMatchState",
            "members": [
              "Nil",
              "WaitingForActionHash",
              "WaitingForAction",
              "Player_1_Won",
              "Player_2_Won",
              "Drawn",
              "Aborted"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)2234_storage)": {
            "label": "mapping(uint64 => struct IRockScissorsPaperDuel.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)2234_storage": {
            "label": "struct IRockScissorsPaperDuel.RspMatchData",
            "members": [
              {
                "label": "lastPlayer1ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastPlayer2ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_enum(RspAction)2381)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_enum(RspAction)2381)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "round",
                "type": "t_uint16",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "actionTimeLimit",
                "type": "t_uint40",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "revelationTimeLimit",
                "type": "t_uint40",
                "offset": 7,
                "slot": "4"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 12,
                "slot": "4"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player1Score",
                "type": "t_uint16",
                "offset": 20,
                "slot": "5"
              },
              {
                "label": "player2Score",
                "type": "t_uint16",
                "offset": 22,
                "slot": "5"
              },
              {
                "label": "checkpoint",
                "type": "t_uint40",
                "offset": 24,
                "slot": "5"
              },
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 29,
                "slot": "5"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 30,
                "slot": "5"
              },
              {
                "label": "state",
                "type": "t_enum(RspMatchState)2194",
                "offset": 31,
                "slot": "5"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "tieBreakScore",
                "type": "t_uint8",
                "offset": 1,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "79cd72001346e6da4bd912df2b88f0f03c8ef2472d9067661e08221d526c814f": {
      "address": "0x4b7Ca2ca33d72ddC2B8161a665085C527c4C3E98",
      "txHash": "0x158cc4ebbb534e5c2b699d069468862dc802a497091061fbad8c82461d687f06",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)2242_storage)",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:14"
          },
          {
            "label": "duelGameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:16"
          },
          {
            "label": "actionTimeLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:17"
          },
          {
            "label": "revelationTimeLimit",
            "offset": 25,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:18"
          },
          {
            "label": "tieBreakScore",
            "offset": 30,
            "slot": "1",
            "type": "t_uint8",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:19"
          },
          {
            "label": "_initialized",
            "offset": 31,
            "slot": "1",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 0,
            "slot": "2",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "53",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "103",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(RspAction)2389)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.RspAction[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(RspAction)2389": {
            "label": "enum RockScissorsPaperLogic.RspAction",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(RspMatchState)2202": {
            "label": "enum IRockScissorsPaperDuel.RspMatchState",
            "members": [
              "Nil",
              "WaitingForActionHash",
              "WaitingForAction",
              "Player_1_Won",
              "Player_2_Won",
              "Drawn",
              "Aborted"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)2242_storage)": {
            "label": "mapping(uint64 => struct IRockScissorsPaperDuel.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)2242_storage": {
            "label": "struct IRockScissorsPaperDuel.RspMatchData",
            "members": [
              {
                "label": "lastPlayer1ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastPlayer2ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_enum(RspAction)2389)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_enum(RspAction)2389)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "round",
                "type": "t_uint16",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "actionTimeLimit",
                "type": "t_uint40",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "revelationTimeLimit",
                "type": "t_uint40",
                "offset": 7,
                "slot": "4"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 12,
                "slot": "4"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player1Score",
                "type": "t_uint16",
                "offset": 20,
                "slot": "5"
              },
              {
                "label": "player2Score",
                "type": "t_uint16",
                "offset": 22,
                "slot": "5"
              },
              {
                "label": "checkpoint",
                "type": "t_uint40",
                "offset": 24,
                "slot": "5"
              },
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 29,
                "slot": "5"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 30,
                "slot": "5"
              },
              {
                "label": "state",
                "type": "t_enum(RspMatchState)2202",
                "offset": 31,
                "slot": "5"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "tieBreakScore",
                "type": "t_uint8",
                "offset": 1,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "c9fc63bd84e9b753e5392908647e0ff293b4bd8daffe0402c05574c81632a1a1": {
      "address": "0x042F86d4D1edA6452E896C66deA41B2Ccb79CC93",
      "txHash": "0x4d6f1895ed2dfdca0f487f582720562ba62100c14181b3af90253d3d916b9255",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)2246_storage)",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:14"
          },
          {
            "label": "duelGameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:16"
          },
          {
            "label": "actionTimeLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:17"
          },
          {
            "label": "revelationTimeLimit",
            "offset": 25,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:18"
          },
          {
            "label": "tieBreakScore",
            "offset": 30,
            "slot": "1",
            "type": "t_uint8",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:19"
          },
          {
            "label": "_initialized",
            "offset": 31,
            "slot": "1",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 0,
            "slot": "2",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "53",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "103",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(RspAction)2393)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.RspAction[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(RspAction)2393": {
            "label": "enum RockScissorsPaperLogic.RspAction",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(RspMatchState)2206": {
            "label": "enum IRockScissorsPaperDuel.RspMatchState",
            "members": [
              "Nil",
              "WaitingForActionHash",
              "WaitingForAction",
              "Player_1_Won",
              "Player_2_Won",
              "Drawn",
              "Aborted"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)2246_storage)": {
            "label": "mapping(uint64 => struct IRockScissorsPaperDuel.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)2246_storage": {
            "label": "struct IRockScissorsPaperDuel.RspMatchData",
            "members": [
              {
                "label": "lastPlayer1ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastPlayer2ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_enum(RspAction)2393)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_enum(RspAction)2393)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "round",
                "type": "t_uint16",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "actionTimeLimit",
                "type": "t_uint40",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "revelationTimeLimit",
                "type": "t_uint40",
                "offset": 7,
                "slot": "4"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 12,
                "slot": "4"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player1Score",
                "type": "t_uint16",
                "offset": 20,
                "slot": "5"
              },
              {
                "label": "player2Score",
                "type": "t_uint16",
                "offset": 22,
                "slot": "5"
              },
              {
                "label": "checkpoint",
                "type": "t_uint40",
                "offset": 24,
                "slot": "5"
              },
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 29,
                "slot": "5"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 30,
                "slot": "5"
              },
              {
                "label": "state",
                "type": "t_enum(RspMatchState)2206",
                "offset": 31,
                "slot": "5"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "tieBreakScore",
                "type": "t_uint8",
                "offset": 1,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "a0070f959eb80c60c6b26ac4019366eeebc975f613a6fa10c92ca87cd59b0ea5": {
      "address": "0x15b3b4e8cE25Ef1a8a71908e89f0c762BcaC7834",
      "txHash": "0x3168cfcc557fab3347cca882ba0887dbf042d6ae947211b6ffa11c2bcdb40c2c",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)2252_storage)",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:14"
          },
          {
            "label": "duelGameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:16"
          },
          {
            "label": "actionTimeLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:17"
          },
          {
            "label": "revelationTimeLimit",
            "offset": 25,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:18"
          },
          {
            "label": "tieBreakScore",
            "offset": 30,
            "slot": "1",
            "type": "t_uint8",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:19"
          },
          {
            "label": "_initialized",
            "offset": 31,
            "slot": "1",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 0,
            "slot": "2",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "53",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "103",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(RspAction)2399)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.RspAction[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(RspAction)2399": {
            "label": "enum RockScissorsPaperLogic.RspAction",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(RspMatchState)2212": {
            "label": "enum IRockScissorsPaperDuel.RspMatchState",
            "members": [
              "Nil",
              "WaitingForActionHash",
              "WaitingForAction",
              "Player_1_Won",
              "Player_2_Won",
              "Drawn",
              "Aborted"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)2252_storage)": {
            "label": "mapping(uint64 => struct IRockScissorsPaperDuel.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)2252_storage": {
            "label": "struct IRockScissorsPaperDuel.RspMatchData",
            "members": [
              {
                "label": "lastPlayer1ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastPlayer2ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_enum(RspAction)2399)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_enum(RspAction)2399)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "round",
                "type": "t_uint16",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "actionTimeLimit",
                "type": "t_uint40",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "revelationTimeLimit",
                "type": "t_uint40",
                "offset": 7,
                "slot": "4"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 12,
                "slot": "4"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player1Score",
                "type": "t_uint16",
                "offset": 20,
                "slot": "5"
              },
              {
                "label": "player2Score",
                "type": "t_uint16",
                "offset": 22,
                "slot": "5"
              },
              {
                "label": "checkpoint",
                "type": "t_uint40",
                "offset": 24,
                "slot": "5"
              },
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 29,
                "slot": "5"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 30,
                "slot": "5"
              },
              {
                "label": "state",
                "type": "t_enum(RspMatchState)2212",
                "offset": 31,
                "slot": "5"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "tieBreakScore",
                "type": "t_uint8",
                "offset": 1,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "32344a416c6fd2474c99d9338895078bc6ab43a79a809ef41853225b767aaed3": {
      "address": "0x6ae8b7B789e396bc86c865C12342aBbb7aF93663",
      "txHash": "0x7d2982545bc4cf09823460b77d7ad2fd0a7a1e31933e54ea960287b7f8af0c7f",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)2284_storage)",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:14"
          },
          {
            "label": "duelGameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:16"
          },
          {
            "label": "actionTimeLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:17"
          },
          {
            "label": "revelationTimeLimit",
            "offset": 25,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:18"
          },
          {
            "label": "tieBreakScore",
            "offset": 30,
            "slot": "1",
            "type": "t_uint8",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:19"
          },
          {
            "label": "_initialized",
            "offset": 31,
            "slot": "1",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 0,
            "slot": "2",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "53",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "103",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(RspAction)2431)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.RspAction[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(RspAction)2431": {
            "label": "enum RockScissorsPaperLogic.RspAction",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(RspMatchState)2244": {
            "label": "enum IRockScissorsPaperDuel.RspMatchState",
            "members": [
              "Nil",
              "WaitingForActionHash",
              "WaitingForAction",
              "Player_1_Won",
              "Player_2_Won",
              "Drawn",
              "Aborted"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)2284_storage)": {
            "label": "mapping(uint64 => struct IRockScissorsPaperDuel.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)2284_storage": {
            "label": "struct IRockScissorsPaperDuel.RspMatchData",
            "members": [
              {
                "label": "lastPlayer1ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastPlayer2ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_enum(RspAction)2431)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_enum(RspAction)2431)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "round",
                "type": "t_uint16",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "actionTimeLimit",
                "type": "t_uint40",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "revelationTimeLimit",
                "type": "t_uint40",
                "offset": 7,
                "slot": "4"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 12,
                "slot": "4"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player1Score",
                "type": "t_uint16",
                "offset": 20,
                "slot": "5"
              },
              {
                "label": "player2Score",
                "type": "t_uint16",
                "offset": 22,
                "slot": "5"
              },
              {
                "label": "checkpoint",
                "type": "t_uint40",
                "offset": 24,
                "slot": "5"
              },
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 29,
                "slot": "5"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 30,
                "slot": "5"
              },
              {
                "label": "state",
                "type": "t_enum(RspMatchState)2244",
                "offset": 31,
                "slot": "5"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "tieBreakScore",
                "type": "t_uint8",
                "offset": 1,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d27231a8153e63a329c812474417bc2cadc5773e856eee384fb2a4c3132c59b1": {
      "address": "0x09338696461e7b94B6b2799713200d08adE5738D",
      "txHash": "0x42b2c189b18621c4abca58e2ad08e0e28bda8e800a2a2eb192c98c9ac65f1354",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)2290_storage)",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:14"
          },
          {
            "label": "duelGameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:16"
          },
          {
            "label": "actionTimeLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:17"
          },
          {
            "label": "revelationTimeLimit",
            "offset": 25,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:18"
          },
          {
            "label": "tieBreakScore",
            "offset": 30,
            "slot": "1",
            "type": "t_uint8",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:19"
          },
          {
            "label": "_initialized",
            "offset": 31,
            "slot": "1",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 0,
            "slot": "2",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "53",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "103",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(RspAction)2437)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.RspAction[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(RspAction)2437": {
            "label": "enum RockScissorsPaperLogic.RspAction",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(RspMatchState)2250": {
            "label": "enum IRockScissorsPaperDuel.RspMatchState",
            "members": [
              "Nil",
              "WaitingForActionHash",
              "WaitingForAction",
              "Player_1_Won",
              "Player_2_Won",
              "Drawn",
              "Aborted"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)2290_storage)": {
            "label": "mapping(uint64 => struct IRockScissorsPaperDuel.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)2290_storage": {
            "label": "struct IRockScissorsPaperDuel.RspMatchData",
            "members": [
              {
                "label": "lastPlayer1ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastPlayer2ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_enum(RspAction)2437)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_enum(RspAction)2437)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "round",
                "type": "t_uint16",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "actionTimeLimit",
                "type": "t_uint40",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "revelationTimeLimit",
                "type": "t_uint40",
                "offset": 7,
                "slot": "4"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 12,
                "slot": "4"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player1Score",
                "type": "t_uint16",
                "offset": 20,
                "slot": "5"
              },
              {
                "label": "player2Score",
                "type": "t_uint16",
                "offset": 22,
                "slot": "5"
              },
              {
                "label": "checkpoint",
                "type": "t_uint40",
                "offset": 24,
                "slot": "5"
              },
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 29,
                "slot": "5"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 30,
                "slot": "5"
              },
              {
                "label": "state",
                "type": "t_enum(RspMatchState)2250",
                "offset": 31,
                "slot": "5"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "tieBreakScore",
                "type": "t_uint8",
                "offset": 1,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "593fbaae91494ace0435f577a30b2f27c5a4af4e86a406b37cd49d46acb07fcd": {
      "address": "0xD259B908dC485cf135786214B4eC6aAd338798dB",
      "txHash": "0xcbdf1841e33c9a7aee7407fb0327895c35f687bcd664090437c3889812e02f01",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)2296_storage)",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:14"
          },
          {
            "label": "duelGameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:16"
          },
          {
            "label": "actionTimeLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:17"
          },
          {
            "label": "revelationTimeLimit",
            "offset": 25,
            "slot": "1",
            "type": "t_uint40",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:18"
          },
          {
            "label": "tieBreakScore",
            "offset": 30,
            "slot": "1",
            "type": "t_uint8",
            "contract": "RockScissorsPaperDuelStorage",
            "src": "contracts/RockScissorsPaperDuel.sol:19"
          },
          {
            "label": "_initialized",
            "offset": 31,
            "slot": "1",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 0,
            "slot": "2",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "53",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "103",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(RspAction)2443)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.RspAction[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(RspAction)2443": {
            "label": "enum RockScissorsPaperLogic.RspAction",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(RspMatchState)2256": {
            "label": "enum IRockScissorsPaperDuel.RspMatchState",
            "members": [
              "Nil",
              "WaitingForActionHash",
              "WaitingForAction",
              "Player_1_Won",
              "Player_2_Won",
              "Drawn",
              "Aborted"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)2296_storage)": {
            "label": "mapping(uint64 => struct IRockScissorsPaperDuel.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)2296_storage": {
            "label": "struct IRockScissorsPaperDuel.RspMatchData",
            "members": [
              {
                "label": "lastPlayer1ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastPlayer2ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_enum(RspAction)2443)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_enum(RspAction)2443)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "round",
                "type": "t_uint16",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "actionTimeLimit",
                "type": "t_uint40",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "revelationTimeLimit",
                "type": "t_uint40",
                "offset": 7,
                "slot": "4"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 12,
                "slot": "4"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player1Score",
                "type": "t_uint16",
                "offset": 20,
                "slot": "5"
              },
              {
                "label": "player2Score",
                "type": "t_uint16",
                "offset": 22,
                "slot": "5"
              },
              {
                "label": "checkpoint",
                "type": "t_uint40",
                "offset": 24,
                "slot": "5"
              },
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 29,
                "slot": "5"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 30,
                "slot": "5"
              },
              {
                "label": "state",
                "type": "t_enum(RspMatchState)2256",
                "offset": 31,
                "slot": "5"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "tieBreakScore",
                "type": "t_uint8",
                "offset": 1,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "808fd792b713d8871aec1853d2e3c8cf763680a9347b5abb9e957d1b3e055e43": {
      "address": "0x0a38a1Da266Cb5198042E2E1BA88211bd52231A9",
      "txHash": "0x0bc069819dc745e4ff577e0bc8b4baabe2e8cf5976d0e2aedf51b5a6f293aa0d",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)2364_storage)",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:14"
          },
          {
            "label": "gameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:16"
          },
          {
            "label": "actionTimeLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:17"
          },
          {
            "label": "revelationTimeLimit",
            "offset": 25,
            "slot": "1",
            "type": "t_uint40",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:18"
          },
          {
            "label": "tieBreakScore",
            "offset": 30,
            "slot": "1",
            "type": "t_uint8",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:19"
          },
          {
            "label": "_initialized",
            "offset": 31,
            "slot": "1",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 0,
            "slot": "2",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "53",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "103",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(RspAction)2519)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.RspAction[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(RspAction)2519": {
            "label": "enum RockScissorsPaperLogic.RspAction",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(RspMatchState)2324": {
            "label": "enum IDuelRockScissorsPaper.RspMatchState",
            "members": [
              "Nil",
              "WaitingForActionHash",
              "WaitingForAction",
              "Player1Won",
              "Player2Won",
              "Drawn",
              "Aborted"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)2364_storage)": {
            "label": "mapping(uint64 => struct IDuelRockScissorsPaper.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)2364_storage": {
            "label": "struct IDuelRockScissorsPaper.RspMatchData",
            "members": [
              {
                "label": "lastPlayer1ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastPlayer2ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_enum(RspAction)2519)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_enum(RspAction)2519)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "round",
                "type": "t_uint16",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "actionTimeLimit",
                "type": "t_uint40",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "revelationTimeLimit",
                "type": "t_uint40",
                "offset": 7,
                "slot": "4"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 12,
                "slot": "4"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player1Score",
                "type": "t_uint16",
                "offset": 20,
                "slot": "5"
              },
              {
                "label": "player2Score",
                "type": "t_uint16",
                "offset": 22,
                "slot": "5"
              },
              {
                "label": "checkpoint",
                "type": "t_uint40",
                "offset": 24,
                "slot": "5"
              },
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 29,
                "slot": "5"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 30,
                "slot": "5"
              },
              {
                "label": "state",
                "type": "t_enum(RspMatchState)2324",
                "offset": 31,
                "slot": "5"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "tieBreakScore",
                "type": "t_uint8",
                "offset": 1,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "2fd9a48a8b955321524f5f33081b2270781d31137d60568ee987f1b161312399": {
      "address": "0x6891cb9d7E756d8195800999C0E7be2114918Ac8",
      "txHash": "0xdb7069d1b802d4931bc9e29e76f11229e867794484fcaa602da23852552a2213",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)1851_storage)",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:14"
          },
          {
            "label": "matchPlayerActions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint64,t_mapping(t_address,t_array(t_enum(Action)1945)dyn_storage))",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:15"
          },
          {
            "label": "gameHub",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:17"
          },
          {
            "label": "roundNumber",
            "offset": 20,
            "slot": "2",
            "type": "t_uint8",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:18"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:20"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "53",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "53",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "104",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "105",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "154",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "155",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "204",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "205",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(Action)1945)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.Action[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(Action)1945": {
            "label": "enum RockScissorsPaperLogic.Action",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_enum(Action)1945)dyn_storage)": {
            "label": "mapping(address => enum RockScissorsPaperLogic.Action[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_mapping(t_address,t_array(t_enum(Action)1945)dyn_storage))": {
            "label": "mapping(uint64 => mapping(address => enum RockScissorsPaperLogic.Action[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)1851_storage)": {
            "label": "mapping(uint64 => struct IAsyncRockScissorsPaper.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)1851_storage": {
            "label": "struct IAsyncRockScissorsPaper.RspMatchData",
            "members": [
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "roundNumber",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d8e3e218baa3591394bcf32a9d634b91ccbaa3bb8c7a02918c1aec9bc65c2d23": {
      "address": "0x4A677C128D2B906da564A10e4e29D8B301D54529",
      "txHash": "0x45f5fe3f88a943b23ddeb5ad6974188d3cfcbca09cc4779df4153f1ef8360784",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)2368_storage)",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:14"
          },
          {
            "label": "gameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:16"
          },
          {
            "label": "actionTimeLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:17"
          },
          {
            "label": "revelationTimeLimit",
            "offset": 25,
            "slot": "1",
            "type": "t_uint40",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:18"
          },
          {
            "label": "tieBreakScore",
            "offset": 30,
            "slot": "1",
            "type": "t_uint8",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:19"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)50_storage",
            "contract": "DuelRockScissorsPaperStorage",
            "src": "contracts/DuelRockScissorsPaper.sol:21"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "52",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "52",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "53",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "103",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "153",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "203",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_enum(Action)2523)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.Action[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(Action)2523": {
            "label": "enum RockScissorsPaperLogic.Action",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(RspMatchState)2328": {
            "label": "enum IDuelRockScissorsPaper.RspMatchState",
            "members": [
              "Nil",
              "WaitingForActionHash",
              "WaitingForAction",
              "Player1Won",
              "Player2Won",
              "Drawn",
              "Aborted"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)2368_storage)": {
            "label": "mapping(uint64 => struct IDuelRockScissorsPaper.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)2368_storage": {
            "label": "struct IDuelRockScissorsPaper.RspMatchData",
            "members": [
              {
                "label": "lastPlayer1ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastPlayer2ActionHash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_enum(Action)2523)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_enum(Action)2523)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "round",
                "type": "t_uint16",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "actionTimeLimit",
                "type": "t_uint40",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "revelationTimeLimit",
                "type": "t_uint40",
                "offset": 7,
                "slot": "4"
              },
              {
                "label": "player1",
                "type": "t_address",
                "offset": 12,
                "slot": "4"
              },
              {
                "label": "player2",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player1Score",
                "type": "t_uint16",
                "offset": 20,
                "slot": "5"
              },
              {
                "label": "player2Score",
                "type": "t_uint16",
                "offset": 22,
                "slot": "5"
              },
              {
                "label": "checkpoint",
                "type": "t_uint40",
                "offset": 24,
                "slot": "5"
              },
              {
                "label": "player1Submitted",
                "type": "t_bool",
                "offset": 29,
                "slot": "5"
              },
              {
                "label": "player2Submitted",
                "type": "t_bool",
                "offset": 30,
                "slot": "5"
              },
              {
                "label": "state",
                "type": "t_enum(RspMatchState)2328",
                "offset": 31,
                "slot": "5"
              },
              {
                "label": "tieBreakScore",
                "type": "t_uint8",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 1,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "6e8f087e00fb4cf864187e4c1955c6b48ab9b850794ccc6b5356f97fae38d7e7": {
      "address": "0x8843e8c4068a97A0c261f4caC7d3fE298277fa39",
      "txHash": "0x0d3ace733d1a633dc5d2eae653b15b38962369a49127994d0044dbd2d9daae03",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)1617_storage)",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:14"
          },
          {
            "label": "gameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:16"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)50_storage",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:18"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "52",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "52",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "53",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "103",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "153",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "203",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_array(t_enum(Action)1679)dyn_storage)2_storage": {
            "label": "enum RockScissorsPaperLogic.Action[][2]",
            "numberOfBytes": "64"
          },
          "t_array(t_enum(Action)1679)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.Action[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(Action)1679": {
            "label": "enum RockScissorsPaperLogic.Action",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)1617_storage)": {
            "label": "mapping(uint64 => struct IAsyncRockScissorsPaper.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)1617_storage": {
            "label": "struct IAsyncRockScissorsPaper.RspMatchData",
            "members": [
              {
                "label": "playerActions",
                "type": "t_array(t_array(t_enum(Action)1679)dyn_storage)2_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "96bd10052a373483bb3b819f44367867adbaa4449865cb7cf0b986ddb7aee153": {
      "address": "0xe42F9662feaD869A27311394B11AA2FedE333801",
      "txHash": "0x77a81e36f29988783c7df7cc70c3a1939ab5d1312919d071ecbacb57641e793f",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(RspMatchData)3006_storage)",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:14"
          },
          {
            "label": "gameHub",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:16"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)50_storage",
            "contract": "AsyncRockScissorsPaperStorage",
            "src": "contracts/AsyncRockScissorsPaper.sol:18"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "52",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "52",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "53",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "103",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "153",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "203",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_array(t_enum(Action)3539)dyn_storage)2_storage": {
            "label": "enum RockScissorsPaperLogic.Action[][2]",
            "numberOfBytes": "64"
          },
          "t_array(t_enum(Action)3539)dyn_storage": {
            "label": "enum RockScissorsPaperLogic.Action[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(Action)3539": {
            "label": "enum RockScissorsPaperLogic.Action",
            "members": [
              "Rock",
              "Scissor",
              "Paper"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(RspMatchData)3006_storage)": {
            "label": "mapping(uint64 => struct IAsyncRockScissorsPaper.RspMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(RspMatchData)3006_storage": {
            "label": "struct IAsyncRockScissorsPaper.RspMatchData",
            "members": [
              {
                "label": "playerActions",
                "type": "t_array(t_array(t_enum(Action)3539)dyn_storage)2_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "10dcbf0c48a010d394316b14d0c5db8c0674a7604b2a7ec674ced0cb82c243d4": {
      "address": "0x513eaD3fdc0FCDC846bb5F73f3c1b741C13A9C6C",
      "txHash": "0x8343cd79bb83549522b095b3f3ae35357cf902ad115c20fde0d5db63ebb43893",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1369_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:15"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(KnifeHitGameConfig)1449_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:17"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "22",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "22",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "22",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "73",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "74",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "123",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "124",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "173",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "174",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_array(t_uint32)10_storage)dyn_storage": {
            "label": "uint32[10][]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1458_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)10_storage": {
            "label": "uint32[10]",
            "numberOfBytes": "64"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1339": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1369_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1449_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "knifeMoveTime",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1458_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1458_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1369_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1339",
                "offset": 21,
                "slot": "2"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_array(t_uint32)10_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_array(t_uint32)10_storage)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1449_storage",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "864"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "ce9ba42eca34d22250a71e586e26ba4c7f6551cd1b3953a4643309914d57c743": {
      "address": "0x6e64088e2CD3f00ad96DfD424FD3C96f48Eca8BA",
      "txHash": "0xbbc23863a23bb9849b266ab999da81edb32847bc129c49411cb5f19b62401454",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1370_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:16"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(KnifeHitGameConfig)1450_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:18"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "22",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:19"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "22",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "22",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "73",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "74",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "123",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "124",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "173",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "174",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_array(t_uint32)10_storage)dyn_storage": {
            "label": "uint32[10][]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1459_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)10_storage": {
            "label": "uint32[10]",
            "numberOfBytes": "64"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1340": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1370_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1450_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "knifeMoveTime",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1459_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1459_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1370_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1340",
                "offset": 21,
                "slot": "2"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_array(t_uint32)10_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_array(t_uint32)10_storage)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1450_storage",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "864"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "21b8c0d54d97bbc7318c0bb5e860fb631c1a3b668af5845cba3c4177174efca7": {
      "address": "0xD8e142F6037E106cD79D19CF2F91B6CEc93E4B9d",
      "txHash": "0xc2c8a86279d5f6db51597c13e111f8c6a0953fce512ff55ed1c796bd224bde9a",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1539_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:16"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2076_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:18"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(KnifeHitGameConfig)1618_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:20"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "24",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "24",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "24",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "75",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "76",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "125",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "126",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "175",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "176",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1627_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1512": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1539_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1618_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "knifeMoveTime",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1627_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1627_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1539_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1512",
                "offset": 21,
                "slot": "2"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1618_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "896"
          },
          "t_struct(Uint64Set)2076_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "1f3a3299c8ac72bc79b0327b5bc63f14afd60b5a02af95d421ef7d166705d399": {
      "address": "0xE47AA381AE7168095356E75c570d4349e130d374",
      "txHash": "0xb32e1f6a5569b98a32aa6f4636f5d0a6a0d56e5cc7bf2158670fa09e339bd00a",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1545_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:16"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2077_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:18"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(KnifeHitGameConfig)1622_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:20"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "24",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "24",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "24",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "75",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "76",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "125",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "126",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "175",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "176",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1631_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1518": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1545_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1622_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1631_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1631_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1545_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1518",
                "offset": 21,
                "slot": "2"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1622_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "896"
          },
          "t_struct(Uint64Set)2077_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "16dec2c42f8243ed5da861ca180dcba90e0f565a8a650a4a2b02d9845a53a7cf": {
      "address": "0x65180971534629FA0d6515f20BCA71D2BEed7901",
      "txHash": "0x42df72c3a3408ea9f2504fd43441737ad3d9a687faf258e3938bede54f511ca3",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1545_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:16"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2077_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:18"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(KnifeHitGameConfig)1622_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:20"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "24",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "24",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "24",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "75",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "76",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "125",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "126",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "175",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "176",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1631_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1518": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1545_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1622_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1631_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1631_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1545_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1518",
                "offset": 21,
                "slot": "2"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1622_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "896"
          },
          "t_struct(Uint64Set)2077_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "fbab150a5b3904d92c17d4bf2c82568b3f10d60166f3d1a7407b9b33167063e1": {
      "address": "0xb1E6Daf9f8DB88F17b56faf75f26B4b68a8B398b",
      "txHash": "0xc9ca5a9ea1de1a35724cf6a681306fab68fd60dfec9419f1ef45ebd9ef90ff59",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1545_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:16"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2077_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:18"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(KnifeHitGameConfig)1622_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:20"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "24",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "24",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "24",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "75",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "76",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "125",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "126",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "175",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "176",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1631_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1518": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1545_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1622_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1631_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1631_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1545_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1518",
                "offset": 21,
                "slot": "2"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1622_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "896"
          },
          "t_struct(Uint64Set)2077_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "fc6d7e678ae09857602069cae9a4c4c0d5d884a19a316a4a310e4a880a1cb950": {
      "address": "0x38eCA3Fd0df80bBb55C452a6F8A5e0D44dc93277",
      "txHash": "0xf5099b3dd8a421e92b1409c8264a2e35fd76b5253d725ad7f559dccfcfaae1bd",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1557_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:16"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2089_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:18"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(KnifeHitGameConfig)1634_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:20"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "24",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "24",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "24",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "75",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "76",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "125",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "126",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "175",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "176",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1643_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1530": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1557_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1634_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1643_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1643_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1557_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1530",
                "offset": 21,
                "slot": "2"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1634_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "896"
          },
          "t_struct(Uint64Set)2089_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "a9275b89257ceef5f7010ca8230d75f640030180a15a8f3d568852744254dab5": {
      "address": "0x64753ece3703eA0c7Cebfe7e0A2A4fD6F961C75e",
      "txHash": "0x8777c96d408d837945b7f05f87952abc2179fafecd677e2f4aedb28d0a29127a",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1560_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:17"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2094_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:19"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(KnifeHitGameConfig)1639_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "24",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:22"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "24",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "24",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "75",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "76",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "125",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "126",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "175",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "176",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1648_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1533": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1560_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1639_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1648_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1648_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1560_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1533",
                "offset": 21,
                "slot": "2"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1639_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "896"
          },
          "t_struct(Uint64Set)2094_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "f89c7e7f3e01503720308641bb3d9533ca385df67cc99ac5f132aee84fd446be": {
      "address": "0x8A435dd69Db5EE071c6185eaaE1b1EE6A321aed5",
      "txHash": "0xb92817c72e96e2f6660daea34705abecc26af4d30bd9ff177c35616d2f48ed59",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1664_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:17"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2234_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:19"
          },
          {
            "label": "playerPlayingMatches",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Uint64Set)2234_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "playerEndedMatches",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(Uint64Set)2234_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:22"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(KnifeHitGameConfig)1779_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:24"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "26",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:25"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "26",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "26",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "27",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "77",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "78",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "127",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "128",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "177",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "178",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1788_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1637": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Uint64Set)2234_storage)": {
            "label": "mapping(address => struct Set.Uint64Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1664_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1779_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1788_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1788_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1664_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1637",
                "offset": 21,
                "slot": "2"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1779_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "896"
          },
          "t_struct(Uint64Set)2234_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "c5c4cbe5a60036981d7b844e5ceb1839f8b73b232fb9bf956fb8b725002279a7": {
      "address": "0xba59cB03843034d5D323758E5d9D1C11C81746ED",
      "txHash": "0xed5b654336a48a2cfbd1fb141800e5c6cf92a4be47ae6a80fe9d6c2459a7bb12",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1664_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:17"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2236_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:19"
          },
          {
            "label": "playerPlayingMatches",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Uint64Set)2236_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "playerEndedMatches",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(Uint64Set)2236_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:22"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(KnifeHitGameConfig)1781_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:24"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "26",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:25"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "26",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "26",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "27",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "77",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "78",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "127",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "128",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "177",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "178",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1790_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1637": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Uint64Set)2236_storage)": {
            "label": "mapping(address => struct Set.Uint64Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1664_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1781_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1790_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1790_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1664_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1637",
                "offset": 21,
                "slot": "2"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1781_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "896"
          },
          "t_struct(Uint64Set)2236_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "9dd7f2460a660b5e52e55927bc99bdfb42f6960fe2ef332ca6b7fca7f8ff5a93": {
      "address": "0x3D7dcf28516Be62263AA06c2358FF01F92Ab6BeE",
      "txHash": "0xacdc12789deb0076147358b13c50af8ff5e686ddfa562b027854b84ec22b48b2",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1681_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:17"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2253_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:19"
          },
          {
            "label": "playerPlayingMatches",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Uint64Set)2253_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "playerEndedMatches",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(Uint64Set)2253_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:22"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(KnifeHitGameConfig)1798_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:24"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "26",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:25"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "26",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "26",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "27",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "77",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "78",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "127",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "128",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "177",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "178",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1807_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1652": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Uint64Set)2253_storage)": {
            "label": "mapping(address => struct Set.Uint64Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1681_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1798_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1807_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1807_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1681_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "winer",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "3"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1652",
                "offset": 21,
                "slot": "3"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1798_storage",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "928"
          },
          "t_struct(Uint64Set)2253_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "4fdf825fae0638897f41914f735810b31c43af8cfaaf6d863c340d6a3505be4b": {
      "address": "0x5401D842bE586b756a73669725378E0c47D53a33",
      "txHash": "0x37276fd6aa6bc773b6537b384266ff0c9cd309cd80c23b5eb5db89881a1ed217",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1685_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:17"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2257_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:19"
          },
          {
            "label": "playerPlayingMatches",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Uint64Set)2257_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "playerEndedMatches",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(Uint64Set)2257_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:22"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(KnifeHitGameConfig)1802_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:24"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "26",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:25"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "26",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "26",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "27",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "77",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "78",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "127",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "128",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "177",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "178",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1811_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)2_storage": {
            "label": "uint32[2]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1652": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Uint64Set)2257_storage)": {
            "label": "mapping(address => struct Set.Uint64Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1685_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1802_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1811_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1811_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1685_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "winer",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "3"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1652",
                "offset": 21,
                "slot": "3"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "config",
                "type": "t_struct(KnifeHitGameConfig)1802_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "playerScore",
                "type": "t_array(t_uint32)2_storage",
                "offset": 0,
                "slot": "29"
              }
            ],
            "numberOfBytes": "960"
          },
          "t_struct(Uint64Set)2257_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "4c63f3dbca366fa96e0916406bbf3b755221848a5da058581405595945fd09fe": {
      "address": "0x4Eb4b9DBA17334433a13869DF05342E1e231c113",
      "txHash": "0xc5623f0885a23b689da70bad4ef63baae3dde1046569e09b05f77764b5df48aa",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "matches",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1687_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:17"
          },
          {
            "label": "availableMatches",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uint64Set)2180_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:19"
          },
          {
            "label": "playerPlayingMatches",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Uint64Set)2180_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:21"
          },
          {
            "label": "playerEndedMatches",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(Uint64Set)2180_storage)",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:22"
          },
          {
            "label": "gameConfig",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(KnifeHitGameConfig)1804_storage",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:24"
          },
          {
            "label": "matchNumber",
            "offset": 0,
            "slot": "26",
            "type": "t_uint64",
            "contract": "AsyncKnifeHitStorage",
            "src": "contracts/AsyncKnifeHit.sol:25"
          },
          {
            "label": "_initialized",
            "offset": 8,
            "slot": "26",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 9,
            "slot": "26",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "27",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "77",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "78",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "127",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "128",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "177",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "178",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)2_storage": {
            "label": "address[2]",
            "numberOfBytes": "64"
          },
          "t_array(t_struct(KnifeHitLevelConfig)1813_storage)10_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
            "numberOfBytes": "640"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint32)2_storage": {
            "label": "uint32[2]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(GamePhase)1657": {
            "label": "enum IAsyncKnifeHit.GamePhase",
            "members": [
              "None",
              "Playing",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Uint64Set)2180_storage)": {
            "label": "mapping(address => struct Set.Uint64Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(KnifeHitMatchData)1687_storage)": {
            "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_uint64)": {
            "label": "mapping(uint64 => uint64)",
            "numberOfBytes": "32"
          },
          "t_struct(KnifeHitGameConfig)1804_storage": {
            "label": "struct KnifeHitLogic.KnifeHitGameConfig",
            "members": [
              {
                "label": "gameDuration",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "ratio",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "configs",
                "type": "t_array(t_struct(KnifeHitLevelConfig)1813_storage)10_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(KnifeHitLevelConfig)1813_storage": {
            "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
            "members": [
              {
                "label": "easeType",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rotateSpeed",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "knifeCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "1"
              },
              {
                "label": "obstacle",
                "type": "t_uint32",
                "offset": 8,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(KnifeHitMatchData)1687_storage": {
            "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
            "members": [
              {
                "label": "matchId",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "entry",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "winer",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "logicVersion",
                "type": "t_uint8",
                "offset": 20,
                "slot": "3"
              },
              {
                "label": "gamePhase",
                "type": "t_enum(GamePhase)1657",
                "offset": 21,
                "slot": "3"
              },
              {
                "label": "playerAddresses",
                "type": "t_array(t_address)2_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "player1Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "player2Actions",
                "type": "t_array(t_uint32)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "playerScore",
                "type": "t_array(t_uint32)2_storage",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_struct(Uint64Set)2180_storage": {
            "label": "struct Set.Uint64Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint64,t_uint64)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    }
  }
}
