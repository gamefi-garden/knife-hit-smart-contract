{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "withoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "linkedWithoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "withoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "linkedWithoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "withoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "linkedWithoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "withoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "linkedWithoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "withoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "linkedWithoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHit": {
        "src": "contracts/AsyncKnifeHit.sol:33",
        "version": {
          "withMetadata": "1b7f88b192ecb58f1e08150211d18d6f86e189ad6ce6430f64e3a9824f63ef7c",
          "withoutMetadata": "1b7f88b192ecb58f1e08150211d18d6f86e189ad6ce6430f64e3a9824f63ef7c",
          "linkedWithoutMetadata": "1b7f88b192ecb58f1e08150211d18d6f86e189ad6ce6430f64e3a9824f63ef7c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage",
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatchV2(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3017_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)3462_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:23"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3462_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:25"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3462_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)3086_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:28"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:30"
            },
            {
              "label": "_initialized",
              "offset": 8,
              "slot": "26",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 9,
              "slot": "26",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "27",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "77",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "78",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "127",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "128",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "177",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "178",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "179",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "180",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3095_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(GamePhase)2987": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3462_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3017_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3086_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3095_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3095_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)3017_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2987",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3462_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage": {
        "src": "contracts/AsyncKnifeHit.sol:19",
        "inherit": [
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3017_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)3462_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:23"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3462_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:25"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3462_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)3086_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:28"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3095_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_enum(GamePhase)2987": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3462_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3017_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3086_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3095_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3095_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)3017_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2987",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3462_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit": {
        "src": "contracts/interfaces/IAsyncKnifeHit.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatchV2(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/KnifeHitLogic.sol:KnifeHitLogic": {
        "src": "contracts/libraries/KnifeHitLogic.sol:5",
        "version": {
          "withMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "withoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "linkedWithoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "revertActionData(uint256,(uint32,uint32,struct KnifeHitLogic.KnifeHitLevelConfig[10]),uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/Set.sol:Set": {
        "src": "contracts/libraries/Set.sol:5",
        "version": {
          "withMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "withoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "linkedWithoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "version()",
          "updateAsyncGameHubAddress(address)",
          "getPlayerNonce(address)",
          "getPlayingMatchInfoOf(address)",
          "getPlayingHistory(address)",
          "findMatch(address,uint256,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:IAsyncGameHub": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "feePercentage()",
          "gameLibrary()",
          "matchNumber()",
          "treasury()",
          "getAbortedMatches()",
          "getPlayerPlayingMatches(address)",
          "getPlayerLatestUnfinishedMatches(address)",
          "getPlayingMatches()",
          "getMatchPlayerAddresses(uint64)",
          "getMatchPlayers(uint64)",
          "isMatchEnded(uint64)",
          "isMatchEndable(uint64)",
          "findMatch(address,address,uint256,uint8)",
          "endMatch(uint64)",
          "setScore(uint64,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:Signature": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:6",
        "version": {
          "withMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "withoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "linkedWithoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "withoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "linkedWithoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "withoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "linkedWithoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "withoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "linkedWithoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "withoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "linkedWithoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "withoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "linkedWithoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "withoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "linkedWithoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHit": {
        "src": "contracts/AsyncKnifeHit.sol:33",
        "version": {
          "withMetadata": "e59f3d02ec10dae646aa37d50159ee4d0ca1c129126d94b4dbc8805424acea26",
          "withoutMetadata": "e59f3d02ec10dae646aa37d50159ee4d0ca1c129126d94b4dbc8805424acea26",
          "linkedWithoutMetadata": "e59f3d02ec10dae646aa37d50159ee4d0ca1c129126d94b4dbc8805424acea26"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage",
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatchV2(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)3444_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:23"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:25"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)3068_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:28"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:30"
            },
            {
              "label": "_initialized",
              "offset": 8,
              "slot": "26",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 9,
              "slot": "26",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "27",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "77",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "78",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "127",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "128",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "177",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "178",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "179",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "180",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(GamePhase)2969": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3444_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3068_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3077_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)2999_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2969",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3444_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage": {
        "src": "contracts/AsyncKnifeHit.sol:19",
        "inherit": [
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)3444_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:23"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:25"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)3068_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:28"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_enum(GamePhase)2969": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3444_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3068_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3077_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)2999_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2969",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3444_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit": {
        "src": "contracts/interfaces/IAsyncKnifeHit.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatchV2(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/KnifeHitLogic.sol:KnifeHitLogic": {
        "src": "contracts/libraries/KnifeHitLogic.sol:5",
        "version": {
          "withMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "withoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "linkedWithoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "revertActionData(uint256,(uint32,uint32,struct KnifeHitLogic.KnifeHitLevelConfig[10]),uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/Set.sol:Set": {
        "src": "contracts/libraries/Set.sol:5",
        "version": {
          "withMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "withoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "linkedWithoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "version()",
          "updateAsyncGameHubAddress(address)",
          "getPlayerNonce(address)",
          "getPlayingMatchInfoOf(address)",
          "getPlayingHistory(address)",
          "findMatch(address,uint256,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:IAsyncGameHub": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "feePercentage()",
          "gameLibrary()",
          "matchNumber()",
          "treasury()",
          "getAbortedMatches()",
          "getPlayerPlayingMatches(address)",
          "getPlayerLatestUnfinishedMatches(address)",
          "getPlayingMatches()",
          "getMatchPlayerAddresses(uint64)",
          "getMatchPlayers(uint64)",
          "isMatchEnded(uint64)",
          "isMatchEndable(uint64)",
          "findMatch(address,address,uint256,uint8)",
          "endMatch(uint64)",
          "setScore(uint64,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:Signature": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:6",
        "version": {
          "withMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "withoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "linkedWithoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "withoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "linkedWithoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "withoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "linkedWithoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "withoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "linkedWithoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "withoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "linkedWithoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "withoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "linkedWithoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "withoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "linkedWithoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHit": {
        "src": "contracts/AsyncKnifeHit.sol:33",
        "version": {
          "withMetadata": "1a50a951513cc02b87fa203102d8a3785b5a6dc9e52dff866d93bf22bdf8eb5b",
          "withoutMetadata": "1a50a951513cc02b87fa203102d8a3785b5a6dc9e52dff866d93bf22bdf8eb5b",
          "linkedWithoutMetadata": "1a50a951513cc02b87fa203102d8a3785b5a6dc9e52dff866d93bf22bdf8eb5b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage",
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)3444_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:23"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:25"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)3068_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:28"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:30"
            },
            {
              "label": "_initialized",
              "offset": 8,
              "slot": "26",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 9,
              "slot": "26",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "27",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "77",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "78",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "127",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "128",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "177",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "178",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "179",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "180",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(GamePhase)2969": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3444_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3068_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3077_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)2999_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2969",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3444_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage": {
        "src": "contracts/AsyncKnifeHit.sol:19",
        "inherit": [
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)3444_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:23"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:25"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)3068_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:28"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_enum(GamePhase)2969": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3444_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3068_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3077_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)2999_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2969",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3444_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit": {
        "src": "contracts/interfaces/IAsyncKnifeHit.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/KnifeHitLogic.sol:KnifeHitLogic": {
        "src": "contracts/libraries/KnifeHitLogic.sol:5",
        "version": {
          "withMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "withoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "linkedWithoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "revertActionData(uint256,(uint32,uint32,struct KnifeHitLogic.KnifeHitLevelConfig[10]),uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/Set.sol:Set": {
        "src": "contracts/libraries/Set.sol:5",
        "version": {
          "withMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "withoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "linkedWithoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "version()",
          "updateAsyncGameHubAddress(address)",
          "getPlayerNonce(address)",
          "getPlayingMatchInfoOf(address)",
          "getPlayingHistory(address)",
          "findMatch(address,uint256,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:IAsyncGameHub": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "feePercentage()",
          "gameLibrary()",
          "matchNumber()",
          "treasury()",
          "getAbortedMatches()",
          "getPlayerPlayingMatches(address)",
          "getPlayerLatestUnfinishedMatches(address)",
          "getPlayingMatches()",
          "getMatchPlayerAddresses(uint64)",
          "getMatchPlayers(uint64)",
          "isMatchEnded(uint64)",
          "isMatchEndable(uint64)",
          "findMatch(address,address,uint256,uint8)",
          "endMatch(uint64)",
          "setScore(uint64,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:Signature": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:6",
        "version": {
          "withMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "withoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "linkedWithoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "withoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "linkedWithoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "withoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "linkedWithoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "withoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "linkedWithoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "withoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "linkedWithoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "withoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "linkedWithoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "withoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "linkedWithoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHit": {
        "src": "contracts/AsyncKnifeHit.sol:33",
        "version": {
          "withMetadata": "57935523b196f98a371eb3967b23849d0fccbf826388c7d2976e254fc6a9418b",
          "withoutMetadata": "57935523b196f98a371eb3967b23849d0fccbf826388c7d2976e254fc6a9418b",
          "linkedWithoutMetadata": "57935523b196f98a371eb3967b23849d0fccbf826388c7d2976e254fc6a9418b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage",
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)3444_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:23"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:25"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)3068_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:28"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:30"
            },
            {
              "label": "_initialized",
              "offset": 8,
              "slot": "26",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 9,
              "slot": "26",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "27",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "77",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "78",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "127",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "128",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "177",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "178",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "179",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "180",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(GamePhase)2969": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3444_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3068_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3077_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)2999_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2969",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3444_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage": {
        "src": "contracts/AsyncKnifeHit.sol:19",
        "inherit": [
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)3444_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:23"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:25"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3444_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)3068_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:28"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_enum(GamePhase)2969": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3444_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2999_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3068_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3077_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3077_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)2999_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2969",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3444_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit": {
        "src": "contracts/interfaces/IAsyncKnifeHit.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/KnifeHitLogic.sol:KnifeHitLogic": {
        "src": "contracts/libraries/KnifeHitLogic.sol:5",
        "version": {
          "withMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "withoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "linkedWithoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "revertActionData(uint256,(uint32,uint32,struct KnifeHitLogic.KnifeHitLevelConfig[10]),uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/Set.sol:Set": {
        "src": "contracts/libraries/Set.sol:5",
        "version": {
          "withMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "withoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "linkedWithoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "version()",
          "updateAsyncGameHubAddress(address)",
          "getPlayerNonce(address)",
          "getPlayingMatchInfoOf(address)",
          "findMatch(address,uint256,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:IAsyncGameHub": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "feePercentage()",
          "gameLibrary()",
          "matchNumber()",
          "treasury()",
          "getAbortedMatches()",
          "getPlayerPlayingMatches(address)",
          "getPlayerLatestUnfinishedMatches(address)",
          "getPlayingMatches()",
          "getMatchPlayerAddresses(uint64)",
          "getMatchPlayers(uint64)",
          "isMatchEnded(uint64)",
          "isMatchEndable(uint64)",
          "findMatch(address,address,uint256,uint8)",
          "endMatch(uint64)",
          "setScore(uint64,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:Signature": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:6",
        "version": {
          "withMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "withoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "linkedWithoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "withoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "linkedWithoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "withoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "linkedWithoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "withoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "linkedWithoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "withoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "linkedWithoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "withoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "linkedWithoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "withoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "linkedWithoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHit": {
        "src": "contracts/AsyncKnifeHit.sol:34",
        "version": {
          "withMetadata": "186adfe030431378413d9bd9e9a8e5171c59104ff1742820cead4f7fedb226a0",
          "withoutMetadata": "186adfe030431378413d9bd9e9a8e5171c59104ff1742820cead4f7fedb226a0",
          "linkedWithoutMetadata": "186adfe030431378413d9bd9e9a8e5171c59104ff1742820cead4f7fedb226a0"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage",
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "version()",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3020_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "gameHub",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:22"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Uint64Set)3465_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:24"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3465_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3465_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:27"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(KnifeHitGameConfig)3089_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:29"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "27",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:31"
            },
            {
              "label": "_initialized",
              "offset": 8,
              "slot": "27",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 9,
              "slot": "27",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "28",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "78",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "79",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "128",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "129",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "178",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "179",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "180",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "181",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3098_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(GamePhase)2990": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3465_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3020_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3089_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3098_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3098_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)3020_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2990",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3465_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage": {
        "src": "contracts/AsyncKnifeHit.sol:19",
        "inherit": [
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3020_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "gameHub",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:22"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Uint64Set)3465_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:24"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3465_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3465_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:27"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(KnifeHitGameConfig)3089_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:29"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "27",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3098_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_enum(GamePhase)2990": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3465_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3020_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3089_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3098_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3098_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)3020_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2990",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3465_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit": {
        "src": "contracts/interfaces/IAsyncKnifeHit.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/KnifeHitLogic.sol:KnifeHitLogic": {
        "src": "contracts/libraries/KnifeHitLogic.sol:5",
        "version": {
          "withMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "withoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "linkedWithoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "revertActionData(uint256,(uint32,uint32,struct KnifeHitLogic.KnifeHitLevelConfig[10]),uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/Set.sol:Set": {
        "src": "contracts/libraries/Set.sol:5",
        "version": {
          "withMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "withoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "linkedWithoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "version()",
          "updateAsyncGameHubAddress(address)",
          "getPlayerNonce(address)",
          "getPlayingMatchInfoOf(address)",
          "findMatch(address,uint256,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:IAsyncGameHub": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "feePercentage()",
          "gameLibrary()",
          "matchNumber()",
          "treasury()",
          "getAbortedMatches()",
          "getPlayerPlayingMatches(address)",
          "getPlayerLatestUnfinishedMatches(address)",
          "getPlayingMatches()",
          "getMatchPlayerAddresses(uint64)",
          "getMatchPlayers(uint64)",
          "isMatchEnded(uint64)",
          "isMatchEndable(uint64)",
          "findMatch(address,address,uint256,uint8)",
          "endMatch(uint64)",
          "setScore(uint64,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:Signature": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:6",
        "version": {
          "withMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "withoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "linkedWithoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "withoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "linkedWithoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "withoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "linkedWithoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "withoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "linkedWithoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "withoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "linkedWithoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "withoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "linkedWithoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "withoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "linkedWithoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHit": {
        "src": "contracts/AsyncKnifeHit.sol:34",
        "version": {
          "withMetadata": "3659a5a8af264d5ff9e99d41d3581304b69b2c4797f168d5a35d8cb6ce4dc39a",
          "withoutMetadata": "3659a5a8af264d5ff9e99d41d3581304b69b2c4797f168d5a35d8cb6ce4dc39a",
          "linkedWithoutMetadata": "3659a5a8af264d5ff9e99d41d3581304b69b2c4797f168d5a35d8cb6ce4dc39a"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage",
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "version()",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3008_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "gameHub",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:22"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Uint64Set)3453_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:24"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3453_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3453_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:27"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(KnifeHitGameConfig)3077_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:29"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "27",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:31"
            },
            {
              "label": "_initialized",
              "offset": 8,
              "slot": "27",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 9,
              "slot": "27",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "28",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "78",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "79",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "128",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "129",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "178",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "179",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "180",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "181",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3086_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(GamePhase)2978": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3453_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3008_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3077_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3086_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3086_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)3008_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2978",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3453_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage": {
        "src": "contracts/AsyncKnifeHit.sol:19",
        "inherit": [
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3008_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "gameHub",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:22"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Uint64Set)3453_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:24"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3453_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3453_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:27"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(KnifeHitGameConfig)3077_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:29"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "27",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3086_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_enum(GamePhase)2978": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3453_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3008_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3077_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3086_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3086_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)3008_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2978",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3453_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit": {
        "src": "contracts/interfaces/IAsyncKnifeHit.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/KnifeHitLogic.sol:KnifeHitLogic": {
        "src": "contracts/libraries/KnifeHitLogic.sol:5",
        "version": {
          "withMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "withoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "linkedWithoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "revertActionData(uint256,(uint32,uint32,struct KnifeHitLogic.KnifeHitLevelConfig[10]),uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/Set.sol:Set": {
        "src": "contracts/libraries/Set.sol:5",
        "version": {
          "withMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "withoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "linkedWithoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "version()",
          "updateAsyncGameHubAddress(address)",
          "getPlayerNonce(address)",
          "getPlayingMatchInfoOf(address)",
          "findMatch(address,uint256,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:IAsyncGameHub": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "feePercentage()",
          "gameLibrary()",
          "matchNumber()",
          "treasury()",
          "getAbortedMatches()",
          "getPlayerPlayingMatches(address)",
          "getPlayerLatestUnfinishedMatches(address)",
          "getPlayingMatches()",
          "getMatchPlayerAddresses(uint64)",
          "getMatchPlayers(uint64)",
          "isMatchEnded(uint64)",
          "isMatchEndable(uint64)",
          "findMatch(address,address,uint256,uint8)",
          "endMatch(uint64)",
          "setScore(uint64,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:Signature": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:6",
        "version": {
          "withMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "withoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "linkedWithoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "withoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "linkedWithoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "withoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "linkedWithoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "withoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "linkedWithoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "withoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "linkedWithoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "withoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "linkedWithoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "withoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "linkedWithoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHit": {
        "src": "contracts/AsyncKnifeHit.sol:34",
        "version": {
          "withMetadata": "53dd5db2391dc3f8d4b766e8e654cd0a6ceb3c0a22c21c9a0761f87d8dcdc990",
          "withoutMetadata": "53dd5db2391dc3f8d4b766e8e654cd0a6ceb3c0a22c21c9a0761f87d8dcdc990",
          "linkedWithoutMetadata": "53dd5db2391dc3f8d4b766e8e654cd0a6ceb3c0a22c21c9a0761f87d8dcdc990"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage",
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,uint8)",
          "version()",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3010_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "gameHub",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:22"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Uint64Set)3455_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:24"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3455_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3455_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:27"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(KnifeHitGameConfig)3079_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:29"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "27",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:31"
            },
            {
              "label": "_initialized",
              "offset": 8,
              "slot": "27",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 9,
              "slot": "27",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "28",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "78",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "79",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "128",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "129",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "178",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "179",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "180",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "181",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3088_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(GamePhase)2980": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3455_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3010_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3079_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3088_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3088_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)3010_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2980",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3455_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage": {
        "src": "contracts/AsyncKnifeHit.sol:19",
        "inherit": [
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3010_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:20"
            },
            {
              "label": "gameHub",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:22"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Uint64Set)3455_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:24"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3455_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Uint64Set)3455_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:27"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(KnifeHitGameConfig)3079_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:29"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "27",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3088_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_enum(GamePhase)2980": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)3455_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3010_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3079_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3088_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3088_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)3010_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2980",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)3455_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit": {
        "src": "contracts/interfaces/IAsyncKnifeHit.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/KnifeHitLogic.sol:KnifeHitLogic": {
        "src": "contracts/libraries/KnifeHitLogic.sol:5",
        "version": {
          "withMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "withoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "linkedWithoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "revertActionData(uint256,(uint32,uint32,struct KnifeHitLogic.KnifeHitLevelConfig[10]),uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/Set.sol:Set": {
        "src": "contracts/libraries/Set.sol:5",
        "version": {
          "withMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "withoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "linkedWithoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "version()",
          "updateAsyncGameHubAddress(address)",
          "getPlayerNonce(address)",
          "getPlayingMatchInfoOf(address)",
          "findMatch(address,uint256,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:IAsyncGameHub": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "feePercentage()",
          "gameLibrary()",
          "matchNumber()",
          "treasury()",
          "getAbortedMatches()",
          "getPlayerPlayingMatches(address)",
          "getPlayerLatestUnfinishedMatches(address)",
          "getPlayingMatches()",
          "getMatchPlayerAddresses(uint64)",
          "getMatchPlayers(uint64)",
          "isMatchEnded(uint64)",
          "isMatchEndable(uint64)",
          "findMatch(address,address,uint256,uint8)",
          "endMatch(uint64)",
          "setScore(uint64,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:Signature": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:6",
        "version": {
          "withMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "withoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "linkedWithoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "withoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "linkedWithoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:IERC5267Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
        "version": {
          "withMetadata": "57275e3d5ef7256b2351fe85612d18133ad7b5077a8d0a312fee0d46b4653998",
          "withoutMetadata": "57275e3d5ef7256b2351fe85612d18133ad7b5077a8d0a312fee0d46b4653998",
          "linkedWithoutMetadata": "57275e3d5ef7256b2351fe85612d18133ad7b5077a8d0a312fee0d46b4653998"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:IERC5267Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
            },
            {
              "label": "_hashedName",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
              "renamedFrom": "_HASHED_NAME"
            },
            {
              "label": "_hashedVersion",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
              "renamedFrom": "_HASHED_VERSION"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "103",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "104",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)48_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)2246_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)2246_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)2246_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "f89fc367be6c1f67523b6f63e0d3b42f1128e9b4ffe1d1d44d6c5f5cebb3a5d8",
          "withoutMetadata": "f89fc367be6c1f67523b6f63e0d3b42f1128e9b4ffe1d1d44d6c5f5cebb3a5d8",
          "linkedWithoutMetadata": "f89fc367be6c1f67523b6f63e0d3b42f1128e9b4ffe1d1d44d6c5f5cebb3a5d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "withoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "linkedWithoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "a79b068380132e949e132fa33a8eede0a0cb3d24034230f82d44836698e325c4",
          "withoutMetadata": "a79b068380132e949e132fa33a8eede0a0cb3d24034230f82d44836698e325c4",
          "linkedWithoutMetadata": "a79b068380132e949e132fa33a8eede0a0cb3d24034230f82d44836698e325c4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "withoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c",
          "linkedWithoutMetadata": "c831caf754032d41daefd1045db033535f41ffda441233094434fb4b0d26bd0c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "withoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc",
          "linkedWithoutMetadata": "aaa6b0a46ca89a9f88ec1c2dfa067af8492067cad979818052a055b3294b88cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:35",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:IERC5267Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_hashedName",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
              "renamedFrom": "_HASHED_NAME"
            },
            {
              "label": "_hashedVersion",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
              "renamedFrom": "_HASHED_VERSION"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_uint256)48_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
            }
          ],
          "types": {
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "withoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359",
          "linkedWithoutMetadata": "ce907f71729043cdeabf77a8b467230dfe8020d49fc4ce0e52d6365aa3415359"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "withoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340",
          "linkedWithoutMetadata": "dcc285984b496e218956d040eb4f102b134e8e6b4ca3243a76c42eae43139340"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHit": {
        "src": "contracts/AsyncKnifeHit.sol:33",
        "version": {
          "withMetadata": "1f60aebaa9675d2ab0827c6148508052a285386b85ed40c7561005a655408f32",
          "withoutMetadata": "1f60aebaa9675d2ab0827c6148508052a285386b85ed40c7561005a655408f32",
          "linkedWithoutMetadata": "1f60aebaa9675d2ab0827c6148508052a285386b85ed40c7561005a655408f32"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage",
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,uint8)",
          "version()",
          "getMatchesByAddress(address)",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)4700_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:19"
            },
            {
              "label": "gameHub",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:21"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Uint64Set)5158_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:23"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)5158_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:25"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Uint64Set)5158_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(KnifeHitGameConfig)4782_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:28"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "27",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:30"
            },
            {
              "label": "_initialized",
              "offset": 8,
              "slot": "27",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 9,
              "slot": "27",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "28",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "78",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "79",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "128",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "129",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "178",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "179",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)4791_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(GamePhase)4670": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)5158_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)4700_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)4782_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)4791_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)4791_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)4700_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)4670",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)5158_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage": {
        "src": "contracts/AsyncKnifeHit.sol:18",
        "inherit": [
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)4700_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:19"
            },
            {
              "label": "gameHub",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:21"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Uint64Set)5158_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:23"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)5158_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:25"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Uint64Set)5158_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(KnifeHitGameConfig)4782_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:28"
            },
            {
              "label": "matchNumber",
              "offset": 0,
              "slot": "27",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)4791_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_enum(GamePhase)4670": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)5158_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)4700_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)4782_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)4791_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)4791_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)4700_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)4670",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)5158_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit": {
        "src": "contracts/interfaces/IAsyncKnifeHit.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getMatchesByAddress(address)",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/KnifeHitLogic.sol:KnifeHitLogic": {
        "src": "contracts/libraries/KnifeHitLogic.sol:5",
        "version": {
          "withMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "withoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "linkedWithoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "revertActionData(uint256,(uint32,uint32,struct KnifeHitLogic.KnifeHitLevelConfig[10]),uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/Set.sol:Set": {
        "src": "contracts/libraries/Set.sol:5",
        "version": {
          "withMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "withoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "linkedWithoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:BaseAsyncMatchingGame": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:7",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "version()",
          "updateAsyncGameHubAddress(address)",
          "getPlayerNonce(address)",
          "getPlayingMatchInfoOf(address)",
          "findMatch(address,uint256,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "asyncGameHubAddress",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:8"
            },
            {
              "label": "noncePlayers",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAsyncMatchingGame",
              "src": "contracts/submodule/acrade-async-base-contract/contracts/BaseAsyncMatchingGame.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:IAsyncGameHub": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/IAsyncGameHub.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "feePercentage()",
          "gameLibrary()",
          "matchNumber()",
          "treasury()",
          "getAbortedMatches()",
          "getPlayerPlayingMatches(address)",
          "getPlayerLatestUnfinishedMatches(address)",
          "getPlayingMatches()",
          "getMatchPlayerAddresses(uint64)",
          "getMatchPlayers(uint64)",
          "isMatchEnded(uint64)",
          "isMatchEndable(uint64)",
          "findMatch(address,address,uint256,uint8)",
          "endMatch(uint64)",
          "setScore(uint64,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:Signature": {
        "src": "contracts/submodule/acrade-async-base-contract/contracts/Signature.sol:6",
        "version": {
          "withMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "withoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397",
          "linkedWithoutMetadata": "c6da93084ad3ef1a8e3cea7ac5152ad951a7a61b5492bc6e358aa5d6bd47b397"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:JackpotGameHub": {
        "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:83",
        "version": {
          "withMetadata": "a03f6ef6543fba4bdca60c158fd80c1c851c51a35ae02b779da8acd16b5ad5a3",
          "withoutMetadata": "a03f6ef6543fba4bdca60c158fd80c1c851c51a35ae02b779da8acd16b5ad5a3",
          "linkedWithoutMetadata": "a03f6ef6543fba4bdca60c158fd80c1c851c51a35ae02b779da8acd16b5ad5a3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:JackpotStorage",
          "contracts/submodule/jackpot/contracts/interfaces/IJackpotGameHub.sol:IJackpotGameHub",
          "contracts/submodule/jackpot/contracts/interfaces/IJackpotGameHub.sol:IJackpotGameHubMigratable",
          "contracts/submodule/jackpot/contracts/interfaces/IAddressComparator.sol:IAddressComparator"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,uint8,uint256[])",
          "version()",
          "pause()",
          "unpause()",
          "migrate(address)",
          "updateAlphaFactory(address)",
          "updateTreasury(address)",
          "updateOperationFund(address)",
          "updateOperationFundingPercentage(uint8)",
          "updateReservePercentage(uint8)",
          "updatePotNumber(uint64)",
          "updateGameAdditionalDuration(address,uint40)",
          "updateGameName(address,string)",
          "updateGameDefaultTicketPrice(address,uint256)",
          "updateGameFeePercentage(address,uint8)",
          "addNewRewardConfig(uint256[])",
          "getRewardConfig(uint16)",
          "getRegisteredGames()",
          "getGamePots(address)",
          "getPlayer(address)",
          "getPotAlpha(uint64,address)",
          "getPotAlphaPlayers(uint64,address)",
          "getPotAlphaPlayerSubmission(uint64,address,address)",
          "getPotDistributions(uint64)",
          "getLatestPotGame()",
          "getLatestPotInfo()",
          "isLatestPotEnded()",
          "isPlayerQualified(uint64,address,address)",
          "hasTicket(address)",
          "registerGame(address,string,uint256,uint40,uint8)",
          "removeGame(address)",
          "compare(address,address)",
          "createPotOfRandomGame(uint256,uint40,uint256,uint256,uint16)",
          "createPotOfSpecificGame(address,uint256,uint40,uint256,uint256,uint16)",
          "raisePot(uint256)",
          "buyTicket(address,bytes)",
          "submitScore(address,address,int256)",
          "closePot()",
          "forceClosePot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "rewardConfigs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint16,t_array(t_uint256)dyn_storage)",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:62"
            },
            {
              "label": "players",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PlayerData)6221_storage)",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:63"
            },
            {
              "label": "games",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(GameData)6216_storage)",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:64"
            },
            {
              "label": "pots",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint64,t_struct(PotData)6276_storage)",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:65"
            },
            {
              "label": "potSecondaryAlphas",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint64,t_struct(AddressHeap)9896_storage)",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:66"
            },
            {
              "label": "registeredGames",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(AddressSet)10485_storage",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:67"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:69"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:70"
            },
            {
              "label": "operationFund",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:71"
            },
            {
              "label": "potNumber",
              "offset": 20,
              "slot": "9",
              "type": "t_uint64",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:72"
            },
            {
              "label": "rewardConfigNumber",
              "offset": 28,
              "slot": "9",
              "type": "t_uint16",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:73"
            },
            {
              "label": "operationFundingPercentage",
              "offset": 30,
              "slot": "9",
              "type": "t_uint8",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:74"
            },
            {
              "label": "reservePercentage",
              "offset": 31,
              "slot": "9",
              "type": "t_uint8",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:75"
            },
            {
              "label": "reservePot",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:76"
            },
            {
              "label": "alphaQualificationThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:77"
            },
            {
              "label": "alphaFactory",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:78"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)50_storage",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:80"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "63",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "63",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "64",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "114",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "115",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "164",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "165",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "214",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "215",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Tier)9494": {
              "label": "enum IJackpotGameHub.Tier",
              "members": [
                "NON_CANDIDATE",
                "TOP_TIER",
                "SECONDARY_TIER"
              ],
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(AlphaData)6238_storage)": {
              "label": "mapping(address => struct JackpotStorage.AlphaData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(GameData)6216_storage)": {
              "label": "mapping(address => struct JackpotStorage.GameData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PlayerData)6221_storage)": {
              "label": "mapping(address => struct JackpotStorage.PlayerData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint16 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(AddressHeap)9896_storage)": {
              "label": "mapping(uint64 => struct Heap.AddressHeap)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PotData)6276_storage)": {
              "label": "mapping(uint64 => struct JackpotStorage.PotData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressHeap)9896_storage": {
              "label": "struct Heap.AddressHeap",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "comparator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "size",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(AddressSet)10485_storage": {
              "label": "struct Set.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(AlphaData)6238_storage": {
              "label": "struct JackpotStorage.AlphaData",
              "members": [
                {
                  "label": "playerSubmissions",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "players",
                  "type": "t_struct(AddressSet)10485_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalScore",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastSubmission",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "totalSubmission",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "4"
                },
                {
                  "label": "tier",
                  "type": "t_enum(Tier)9494",
                  "offset": 8,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(GameData)6216_storage": {
              "label": "struct JackpotStorage.GameData",
              "members": [
                {
                  "label": "pots",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "defaultTicketPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "additionalDuration",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feePercentage",
                  "type": "t_uint8",
                  "offset": 5,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(PlayerData)6221_storage": {
              "label": "struct JackpotStorage.PlayerData",
              "members": [
                {
                  "label": "ticket",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PotData)6276_storage": {
              "label": "struct JackpotStorage.PotData",
              "members": [
                {
                  "label": "alphas",
                  "type": "t_mapping(t_address,t_struct(AlphaData)6238_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "topAlphas",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ticketPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "qualificationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "topAlphasHead",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "additionalDuration",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "5"
                },
                {
                  "label": "topAlphaCount",
                  "type": "t_uint32",
                  "offset": 25,
                  "slot": "5"
                },
                {
                  "label": "feePercentage",
                  "type": "t_uint8",
                  "offset": 29,
                  "slot": "5"
                },
                {
                  "label": "operationFundingPercentage",
                  "type": "t_uint8",
                  "offset": 30,
                  "slot": "5"
                },
                {
                  "label": "reservePercentage",
                  "type": "t_uint8",
                  "offset": 31,
                  "slot": "5"
                },
                {
                  "label": "game",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "endAt",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "6"
                },
                {
                  "label": "submissionCount",
                  "type": "t_uint32",
                  "offset": 25,
                  "slot": "6"
                },
                {
                  "label": "rewardConfigId",
                  "type": "t_uint16",
                  "offset": 29,
                  "slot": "6"
                },
                {
                  "label": "isOpening",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:JackpotStorage": {
        "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:20",
        "inherit": [
          "contracts/submodule/jackpot/contracts/interfaces/IJackpotGameHub.sol:IJackpotGameHub",
          "contracts/submodule/jackpot/contracts/interfaces/IJackpotGameHub.sol:IJackpotGameHubMigratable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "rewardConfigs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint16,t_array(t_uint256)dyn_storage)",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:62"
            },
            {
              "label": "players",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PlayerData)6221_storage)",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:63"
            },
            {
              "label": "games",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(GameData)6216_storage)",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:64"
            },
            {
              "label": "pots",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint64,t_struct(PotData)6276_storage)",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:65"
            },
            {
              "label": "potSecondaryAlphas",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint64,t_struct(AddressHeap)9896_storage)",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:66"
            },
            {
              "label": "registeredGames",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(AddressSet)10485_storage",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:67"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:69"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:70"
            },
            {
              "label": "operationFund",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:71"
            },
            {
              "label": "potNumber",
              "offset": 20,
              "slot": "9",
              "type": "t_uint64",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:72"
            },
            {
              "label": "rewardConfigNumber",
              "offset": 28,
              "slot": "9",
              "type": "t_uint16",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:73"
            },
            {
              "label": "operationFundingPercentage",
              "offset": 30,
              "slot": "9",
              "type": "t_uint8",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:74"
            },
            {
              "label": "reservePercentage",
              "offset": 31,
              "slot": "9",
              "type": "t_uint8",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:75"
            },
            {
              "label": "reservePot",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:76"
            },
            {
              "label": "alphaQualificationThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:77"
            },
            {
              "label": "alphaFactory",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:78"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)50_storage",
              "contract": "JackpotStorage",
              "src": "contracts/submodule/jackpot/contracts/JackpotGameHub.sol:80"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Tier)9494": {
              "label": "enum IJackpotGameHub.Tier",
              "members": [
                "NON_CANDIDATE",
                "TOP_TIER",
                "SECONDARY_TIER"
              ],
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(AlphaData)6238_storage)": {
              "label": "mapping(address => struct JackpotStorage.AlphaData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(GameData)6216_storage)": {
              "label": "mapping(address => struct JackpotStorage.GameData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PlayerData)6221_storage)": {
              "label": "mapping(address => struct JackpotStorage.PlayerData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint16 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(AddressHeap)9896_storage)": {
              "label": "mapping(uint64 => struct Heap.AddressHeap)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PotData)6276_storage)": {
              "label": "mapping(uint64 => struct JackpotStorage.PotData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressHeap)9896_storage": {
              "label": "struct Heap.AddressHeap",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "comparator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "size",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(AddressSet)10485_storage": {
              "label": "struct Set.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(AlphaData)6238_storage": {
              "label": "struct JackpotStorage.AlphaData",
              "members": [
                {
                  "label": "playerSubmissions",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "players",
                  "type": "t_struct(AddressSet)10485_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalScore",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastSubmission",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "totalSubmission",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "4"
                },
                {
                  "label": "tier",
                  "type": "t_enum(Tier)9494",
                  "offset": 8,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(GameData)6216_storage": {
              "label": "struct JackpotStorage.GameData",
              "members": [
                {
                  "label": "pots",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "defaultTicketPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "additionalDuration",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feePercentage",
                  "type": "t_uint8",
                  "offset": 5,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(PlayerData)6221_storage": {
              "label": "struct JackpotStorage.PlayerData",
              "members": [
                {
                  "label": "ticket",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PotData)6276_storage": {
              "label": "struct JackpotStorage.PotData",
              "members": [
                {
                  "label": "alphas",
                  "type": "t_mapping(t_address,t_struct(AlphaData)6238_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "topAlphas",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ticketPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "qualificationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "topAlphasHead",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "additionalDuration",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "5"
                },
                {
                  "label": "topAlphaCount",
                  "type": "t_uint32",
                  "offset": 25,
                  "slot": "5"
                },
                {
                  "label": "feePercentage",
                  "type": "t_uint8",
                  "offset": 29,
                  "slot": "5"
                },
                {
                  "label": "operationFundingPercentage",
                  "type": "t_uint8",
                  "offset": 30,
                  "slot": "5"
                },
                {
                  "label": "reservePercentage",
                  "type": "t_uint8",
                  "offset": 31,
                  "slot": "5"
                },
                {
                  "label": "game",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "endAt",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "6"
                },
                {
                  "label": "submissionCount",
                  "type": "t_uint32",
                  "offset": 25,
                  "slot": "6"
                },
                {
                  "label": "rewardConfigId",
                  "type": "t_uint16",
                  "offset": 29,
                  "slot": "6"
                },
                {
                  "label": "isOpening",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/interfaces/IAddressComparator.sol:IAddressComparator": {
        "src": "contracts/submodule/jackpot/contracts/interfaces/IAddressComparator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "compare(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/interfaces/IAlphaKeysFactory.sol:IAlphaKeysFactory": {
        "src": "contracts/submodule/jackpot/contracts/interfaces/IAlphaKeysFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getKeysPlayer(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/interfaces/IJackpotGameHub.sol:IJackpotGameHub": {
        "src": "contracts/submodule/jackpot/contracts/interfaces/IJackpotGameHub.sol:10",
        "inherit": [
          "contracts/submodule/jackpot/contracts/interfaces/IJackpotGameHub.sol:IJackpotGameHubMigratable"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "potNumber()",
          "alphaFactory()",
          "treasury()",
          "operationFund()",
          "operationFundingPercentage()",
          "reservePercentage()",
          "reservePot()",
          "getGamePots(address)",
          "getLatestPotGame()",
          "getLatestPotInfo()",
          "getPlayer(address)",
          "getPotAlpha(uint64,address)",
          "getPotAlphaPlayers(uint64,address)",
          "getPotAlphaPlayerSubmission(uint64,address,address)",
          "getPotDistributions(uint64)",
          "getRegisteredGames()",
          "getRewardConfig(uint16)",
          "isLatestPotEnded()",
          "isPlayerQualified(uint64,address,address)",
          "hasTicket(address)",
          "createPotOfRandomGame(uint256,uint40,uint256,uint256,uint16)",
          "createPotOfSpecificGame(address,uint256,uint40,uint256,uint256,uint16)",
          "buyTicket(address,bytes)",
          "submitScore(address,address,int256)",
          "closePot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/interfaces/IJackpotGameHub.sol:IJackpotGameHubMigratable": {
        "src": "contracts/submodule/jackpot/contracts/interfaces/IJackpotGameHub.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "raisePot(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/libraries/Heap.sol:Heap": {
        "src": "contracts/submodule/jackpot/contracts/libraries/Heap.sol:6",
        "version": {
          "withMetadata": "ba051226e1e9e40b90b7dafbeddfda8ec5d5e6a4f2006ae3b2b303823b117dce",
          "withoutMetadata": "ba051226e1e9e40b90b7dafbeddfda8ec5d5e6a4f2006ae3b2b303823b117dce",
          "linkedWithoutMetadata": "ba051226e1e9e40b90b7dafbeddfda8ec5d5e6a4f2006ae3b2b303823b117dce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/libraries/Set.sol:Set": {
        "src": "contracts/submodule/jackpot/contracts/libraries/Set.sol:4",
        "version": {
          "withMetadata": "0ab0559eb9089ad01311a0ef49f6c811c484633b90dad1131f58053a7b716345",
          "withoutMetadata": "0ab0559eb9089ad01311a0ef49f6c811c484633b90dad1131f58053a7b716345",
          "linkedWithoutMetadata": "0ab0559eb9089ad01311a0ef49f6c811c484633b90dad1131f58053a7b716345"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/libraries/Signature.sol:Signature": {
        "src": "contracts/submodule/jackpot/contracts/libraries/Signature.sol:6",
        "version": {
          "withMetadata": "8c60f96cb158afbba5e9760211f2c2485f71002d8e0c237f38b302c238ed2dd7",
          "withoutMetadata": "8c60f96cb158afbba5e9760211f2c2485f71002d8e0c237f38b302c238ed2dd7",
          "linkedWithoutMetadata": "8c60f96cb158afbba5e9760211f2c2485f71002d8e0c237f38b302c238ed2dd7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/tests/TestHeap.sol:TestHeap": {
        "src": "contracts/submodule/jackpot/contracts/tests/TestHeap.sol:10",
        "version": {
          "withMetadata": "cf000bb588a9111d75f7bc7c5da8ff24a72320469d7d0a61f0cb2fc59e2f884c",
          "withoutMetadata": "cf000bb588a9111d75f7bc7c5da8ff24a72320469d7d0a61f0cb2fc59e2f884c",
          "linkedWithoutMetadata": "cf000bb588a9111d75f7bc7c5da8ff24a72320469d7d0a61f0cb2fc59e2f884c"
        },
        "inherit": [
          "contracts/submodule/jackpot/contracts/interfaces/IAddressComparator.sol:IAddressComparator",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "compare(address,address)",
          "setValue(address,uint256)",
          "up(address)",
          "down(address)",
          "push(address)",
          "remove(address)",
          "pop()",
          "size()",
          "allValues()",
          "allPositions()",
          "hasValue(address)",
          "peek()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "values",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestHeap",
              "src": "contracts/submodule/jackpot/contracts/tests/TestHeap.sol:13"
            },
            {
              "label": "heap",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(AddressHeap)9896_storage",
              "contract": "TestHeap",
              "src": "contracts/submodule/jackpot/contracts/tests/TestHeap.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressHeap)9896_storage": {
              "label": "struct Heap.AddressHeap",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "comparator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "size",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/tests/TestSet.sol:TestSet": {
        "src": "contracts/submodule/jackpot/contracts/tests/TestSet.sol:10",
        "version": {
          "withMetadata": "cc0c09cee5c4af76c92050cb150a5140eebb0a499f693f02a697c90f97db6b9b",
          "withoutMetadata": "cc0c09cee5c4af76c92050cb150a5140eebb0a499f693f02a697c90f97db6b9b",
          "linkedWithoutMetadata": "cc0c09cee5c4af76c92050cb150a5140eebb0a499f693f02a697c90f97db6b9b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "insert(address)",
          "erase(address)",
          "hasValue(address)",
          "isEmpty()",
          "size()",
          "allValues()",
          "allPositions()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "set",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(AddressSet)10485_storage",
              "contract": "TestSet",
              "src": "contracts/submodule/jackpot/contracts/tests/TestSet.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)10485_storage": {
              "label": "struct Set.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/jackpot/contracts/tests/TestSignature.sol:TestSignature": {
        "src": "contracts/submodule/jackpot/contracts/tests/TestSignature.sol:8",
        "version": {
          "withMetadata": "e0d3000349e4bb7f394dd536f2ad475d8e111f30fafc952ff2a99cafd60386cd",
          "withoutMetadata": "e0d3000349e4bb7f394dd536f2ad475d8e111f30fafc952ff2a99cafd60386cd",
          "linkedWithoutMetadata": "e0d3000349e4bb7f394dd536f2ad475d8e111f30fafc952ff2a99cafd60386cd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyEthSignature(address,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:GameLibrary": {
        "src": "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:19",
        "version": {
          "withMetadata": "3629fe465b44de6fe1e62e9f50bb59e69263fbf13cf922bd866eefccf103d45d",
          "withoutMetadata": "3629fe465b44de6fe1e62e9f50bb59e69263fbf13cf922bd866eefccf103d45d",
          "linkedWithoutMetadata": "3629fe465b44de6fe1e62e9f50bb59e69263fbf13cf922bd866eefccf103d45d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:GameLibraryStorage",
          "contracts/submodule/tournament-game-hub/contracts/interfaces/IGameLibrary.sol:IGameLibrary"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "version()",
          "updateGameName(address,string)",
          "updateGameDefaultAdditionalDuration(address,uint40)",
          "updateGameDefaultFeePercentage(address,uint8)",
          "updateGameDefaultTicketPrice(address,uint256)",
          "getRegisteredGames()",
          "registerGame(address,string,uint256,uint40,uint8)",
          "removeGame(address)",
          "getGameNumber()",
          "getGame(address)",
          "getRandomGameAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "games",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_struct(GameData)14126_storage)",
              "contract": "GameLibraryStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:13"
            },
            {
              "label": "registeredGames",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(AddressSet)15218_storage",
              "contract": "GameLibraryStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "GameLibraryStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:16"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "53",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "53",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "54",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "104",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(GameData)14126_storage)": {
              "label": "mapping(address => struct IGameLibrary.GameData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)15218_storage": {
              "label": "struct Set.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(GameData)14126_storage": {
              "label": "struct IGameLibrary.GameData",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "defaultTicketPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "defaultAdditionalDuration",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "defaultFeePercentage",
                  "type": "t_uint8",
                  "offset": 5,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:GameLibraryStorage": {
        "src": "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:12",
        "inherit": [
          "contracts/submodule/tournament-game-hub/contracts/interfaces/IGameLibrary.sol:IGameLibrary"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "games",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_struct(GameData)14126_storage)",
              "contract": "GameLibraryStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:13"
            },
            {
              "label": "registeredGames",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(AddressSet)15218_storage",
              "contract": "GameLibraryStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "GameLibraryStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/GameLibrary.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_address,t_struct(GameData)14126_storage)": {
              "label": "mapping(address => struct IGameLibrary.GameData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)15218_storage": {
              "label": "struct Set.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(GameData)14126_storage": {
              "label": "struct IGameLibrary.GameData",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "defaultTicketPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "defaultAdditionalDuration",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "defaultFeePercentage",
                  "type": "t_uint8",
                  "offset": 5,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:TournamentGameHub": {
        "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:64",
        "version": {
          "withMetadata": "4ff8c0c7fa7c57f94c47d3ba07709b08eeb15c08575d70a8670f4cdc385f71d0",
          "withoutMetadata": "4ff8c0c7fa7c57f94c47d3ba07709b08eeb15c08575d70a8670f4cdc385f71d0",
          "linkedWithoutMetadata": "4ff8c0c7fa7c57f94c47d3ba07709b08eeb15c08575d70a8670f4cdc385f71d0"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/submodule/tournament-game-hub/contracts/interfaces/IAddressComparator.sol:IAddressComparator",
          "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:TournamentGameHubStorage",
          "contracts/submodule/tournament-game-hub/contracts/interfaces/ITournamentGameHub.sol:ITournamentGameHub"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,uint256,uint256[],address[])",
          "version()",
          "pause()",
          "unpause()",
          "increasePotNumber(uint64)",
          "updateToken(address)",
          "updateTreasury(address)",
          "updateGameLibrary(address)",
          "updateAlphaKeysFactory(address)",
          "updateAlphaFeePercentage(uint8)",
          "updateDefaultBalanceRequirement(uint256)",
          "addNewRewardConfig(uint256[])",
          "registerModerators(address[])",
          "unregisterModerators(address[])",
          "getModerators()",
          "getRewardConfig(uint16)",
          "getGameData(address)",
          "getPlayerData(uint64,address)",
          "getPotDistributions(uint64)",
          "getLatestPotIdOfAlpha(address)",
          "getLatestPotGameOfAlpha(address)",
          "getLatestPotInfoOfAlpha(address)",
          "isLatestPotOfAlphaEnded(address)",
          "isLatestPotOfAlphaCloseable(address)",
          "isPlayerQualified(uint64,address)",
          "compare(address,address)",
          "lockPotCreation()",
          "unlockPotCreation()",
          "createPot(address,address,uint256,uint8,uint40,uint40,uint256,uint256,uint16)",
          "createPotWithSignature(address,address,address,uint256,uint8,uint40,uint40,uint256,uint256,uint16,bytes)",
          "raisePot(uint64,uint256)",
          "buyTicket(uint64,address,bytes)",
          "submitScore(uint64,address,int256)",
          "closePot(uint64)",
          "forceClosePot(uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "rewardConfigs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint16,t_array(t_uint256)dyn_storage)",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:43"
            },
            {
              "label": "alphaLatestPotIds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint64)",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:44"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:45"
            },
            {
              "label": "pots",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint64,t_struct(PotData)11553_storage)",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:46"
            },
            {
              "label": "potSecondaryPlayers",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint64,t_struct(AddressHeap)14629_storage)",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:47"
            },
            {
              "label": "moderators",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(AddressSet)15218_storage",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:48"
            },
            {
              "label": "defaultBalanceRequirement",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:51"
            },
            {
              "label": "potNumber",
              "offset": 20,
              "slot": "8",
              "type": "t_uint64",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:52"
            },
            {
              "label": "rewardConfigNumber",
              "offset": 28,
              "slot": "8",
              "type": "t_uint16",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:53"
            },
            {
              "label": "alphaFeePercentage",
              "offset": 30,
              "slot": "8",
              "type": "t_uint8",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:54"
            },
            {
              "label": "potCreationLock",
              "offset": 31,
              "slot": "8",
              "type": "t_bool",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:55"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:56"
            },
            {
              "label": "moderatorPivot",
              "offset": 20,
              "slot": "9",
              "type": "t_uint32",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:57"
            },
            {
              "label": "gameLibrary",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:58"
            },
            {
              "label": "alphaKeysFactory",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:59"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)50_storage",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:61"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "62",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "62",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "63",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "113",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "114",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "163",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "164",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "213",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "214",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Tier)14212": {
              "label": "enum ITournamentGameHub.Tier",
              "members": [
                "NON_CANDIDATE",
                "TOP_TIER",
                "SECONDARY_TIER"
              ],
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PlayerData)14224_storage)": {
              "label": "mapping(address => struct ITournamentGameHub.PlayerData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint16 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(AddressHeap)14629_storage)": {
              "label": "mapping(uint64 => struct Heap.AddressHeap)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PotData)11553_storage)": {
              "label": "mapping(uint64 => struct TournamentGameHubStorage.PotData)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressHeap)14629_storage": {
              "label": "struct Heap.AddressHeap",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "comparator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "size",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(AddressSet)15218_storage": {
              "label": "struct Set.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PlayerData)14224_storage": {
              "label": "struct ITournamentGameHub.PlayerData",
              "members": [
                {
                  "label": "score",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastSubmission",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "usedTickets",
                  "type": "t_uint32",
                  "offset": 6,
                  "slot": "1"
                },
                {
                  "label": "hasTicket",
                  "type": "t_bool",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "tier",
                  "type": "t_enum(Tier)14212",
                  "offset": 11,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PotData)11553_storage": {
              "label": "struct TournamentGameHubStorage.PotData",
              "members": [
                {
                  "label": "players",
                  "type": "t_mapping(t_address,t_struct(PlayerData)14224_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "topPlayers",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "alpha",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "endAt",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "additionalDuration",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "topPlayerCount",
                  "type": "t_uint16",
                  "offset": 30,
                  "slot": "2"
                },
                {
                  "label": "gameAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "submissionCount",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "rewardConfigId",
                  "type": "t_uint16",
                  "offset": 26,
                  "slot": "3"
                },
                {
                  "label": "feePercentage",
                  "type": "t_uint8",
                  "offset": 28,
                  "slot": "3"
                },
                {
                  "label": "alphaFeePercentage",
                  "type": "t_uint8",
                  "offset": 29,
                  "slot": "3"
                },
                {
                  "label": "isOpening",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "3"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "ticketPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "balanceRequirement",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "topPlayersHead",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "moderator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:TournamentGameHubStorage": {
        "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:19",
        "inherit": [
          "contracts/submodule/tournament-game-hub/contracts/interfaces/ITournamentGameHub.sol:ITournamentGameHub"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "rewardConfigs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint16,t_array(t_uint256)dyn_storage)",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:43"
            },
            {
              "label": "alphaLatestPotIds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint64)",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:44"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:45"
            },
            {
              "label": "pots",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint64,t_struct(PotData)11553_storage)",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:46"
            },
            {
              "label": "potSecondaryPlayers",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint64,t_struct(AddressHeap)14629_storage)",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:47"
            },
            {
              "label": "moderators",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(AddressSet)15218_storage",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:48"
            },
            {
              "label": "defaultBalanceRequirement",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:51"
            },
            {
              "label": "potNumber",
              "offset": 20,
              "slot": "8",
              "type": "t_uint64",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:52"
            },
            {
              "label": "rewardConfigNumber",
              "offset": 28,
              "slot": "8",
              "type": "t_uint16",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:53"
            },
            {
              "label": "alphaFeePercentage",
              "offset": 30,
              "slot": "8",
              "type": "t_uint8",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:54"
            },
            {
              "label": "potCreationLock",
              "offset": 31,
              "slot": "8",
              "type": "t_bool",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:55"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:56"
            },
            {
              "label": "moderatorPivot",
              "offset": 20,
              "slot": "9",
              "type": "t_uint32",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:57"
            },
            {
              "label": "gameLibrary",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:58"
            },
            {
              "label": "alphaKeysFactory",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:59"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)50_storage",
              "contract": "TournamentGameHubStorage",
              "src": "contracts/submodule/tournament-game-hub/contracts/TournamentGameHub.sol:61"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Tier)14212": {
              "label": "enum ITournamentGameHub.Tier",
              "members": [
                "NON_CANDIDATE",
                "TOP_TIER",
                "SECONDARY_TIER"
              ],
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PlayerData)14224_storage)": {
              "label": "mapping(address => struct ITournamentGameHub.PlayerData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint16 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(AddressHeap)14629_storage)": {
              "label": "mapping(uint64 => struct Heap.AddressHeap)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PotData)11553_storage)": {
              "label": "mapping(uint64 => struct TournamentGameHubStorage.PotData)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressHeap)14629_storage": {
              "label": "struct Heap.AddressHeap",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "comparator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "size",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(AddressSet)15218_storage": {
              "label": "struct Set.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PlayerData)14224_storage": {
              "label": "struct ITournamentGameHub.PlayerData",
              "members": [
                {
                  "label": "score",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastSubmission",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "usedTickets",
                  "type": "t_uint32",
                  "offset": 6,
                  "slot": "1"
                },
                {
                  "label": "hasTicket",
                  "type": "t_bool",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "tier",
                  "type": "t_enum(Tier)14212",
                  "offset": 11,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PotData)11553_storage": {
              "label": "struct TournamentGameHubStorage.PotData",
              "members": [
                {
                  "label": "players",
                  "type": "t_mapping(t_address,t_struct(PlayerData)14224_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "topPlayers",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "alpha",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "endAt",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "additionalDuration",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "topPlayerCount",
                  "type": "t_uint16",
                  "offset": 30,
                  "slot": "2"
                },
                {
                  "label": "gameAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "submissionCount",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "rewardConfigId",
                  "type": "t_uint16",
                  "offset": 26,
                  "slot": "3"
                },
                {
                  "label": "feePercentage",
                  "type": "t_uint8",
                  "offset": 28,
                  "slot": "3"
                },
                {
                  "label": "alphaFeePercentage",
                  "type": "t_uint8",
                  "offset": 29,
                  "slot": "3"
                },
                {
                  "label": "isOpening",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "3"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "ticketPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "balanceRequirement",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "topPlayersHead",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "moderator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/interfaces/IAddressComparator.sol:IAddressComparator": {
        "src": "contracts/submodule/tournament-game-hub/contracts/interfaces/IAddressComparator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "compare(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/interfaces/IAlphaKeysFactory.sol:IAlphaKeysFactory": {
        "src": "contracts/submodule/tournament-game-hub/contracts/interfaces/IAlphaKeysFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getKeysPlayer(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/interfaces/IGameLibrary.sol:IGameLibrary": {
        "src": "contracts/submodule/tournament-game-hub/contracts/interfaces/IGameLibrary.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getGameNumber()",
          "getRegisteredGames()",
          "getGame(address)",
          "getRandomGameAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/interfaces/ITournamentGameHub.sol:ITournamentGameHub": {
        "src": "contracts/submodule/tournament-game-hub/contracts/interfaces/ITournamentGameHub.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "token()",
          "treasury()",
          "gameLibrary()",
          "alphaKeysFactory()",
          "defaultBalanceRequirement()",
          "potNumber()",
          "rewardConfigNumber()",
          "moderatorPivot()",
          "alphaFeePercentage()",
          "potCreationLock()",
          "nonces(address)",
          "alphaLatestPotIds(address)",
          "getModerators()",
          "getRewardConfig(uint16)",
          "getGameData(address)",
          "getPlayerData(uint64,address)",
          "getPotDistributions(uint64)",
          "getLatestPotGameOfAlpha(address)",
          "getLatestPotInfoOfAlpha(address)",
          "isLatestPotOfAlphaEnded(address)",
          "isLatestPotOfAlphaCloseable(address)",
          "isPlayerQualified(uint64,address)",
          "createPot(address,address,uint256,uint8,uint40,uint40,uint256,uint256,uint16)",
          "createPotWithSignature(address,address,address,uint256,uint8,uint40,uint40,uint256,uint256,uint16,bytes)",
          "raisePot(uint64,uint256)",
          "buyTicket(uint64,address,bytes)",
          "submitScore(uint64,address,int256)",
          "closePot(uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/libraries/Heap.sol:Heap": {
        "src": "contracts/submodule/tournament-game-hub/contracts/libraries/Heap.sol:6",
        "version": {
          "withMetadata": "f6d6b4b046cc0817e45d4547525a7a55ca98a6e200a69c3eb6b1a56a4fc64096",
          "withoutMetadata": "f6d6b4b046cc0817e45d4547525a7a55ca98a6e200a69c3eb6b1a56a4fc64096",
          "linkedWithoutMetadata": "f6d6b4b046cc0817e45d4547525a7a55ca98a6e200a69c3eb6b1a56a4fc64096"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/libraries/Set.sol:Set": {
        "src": "contracts/submodule/tournament-game-hub/contracts/libraries/Set.sol:4",
        "version": {
          "withMetadata": "fc65b1b608eb6dfed9fb80b52cfeadd0cd82f06484ec7ba0d7156f1877f5764d",
          "withoutMetadata": "fc65b1b608eb6dfed9fb80b52cfeadd0cd82f06484ec7ba0d7156f1877f5764d",
          "linkedWithoutMetadata": "fc65b1b608eb6dfed9fb80b52cfeadd0cd82f06484ec7ba0d7156f1877f5764d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/libraries/Signature.sol:Signature": {
        "src": "contracts/submodule/tournament-game-hub/contracts/libraries/Signature.sol:6",
        "version": {
          "withMetadata": "8eec1d910d143aa90d46604dd51168498cea1c0e11f6e8ea4cd7b4e1f982c673",
          "withoutMetadata": "8eec1d910d143aa90d46604dd51168498cea1c0e11f6e8ea4cd7b4e1f982c673",
          "linkedWithoutMetadata": "8eec1d910d143aa90d46604dd51168498cea1c0e11f6e8ea4cd7b4e1f982c673"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/tests/TestAlphaKeysFactory.sol:TestAlphaKeysFactory": {
        "src": "contracts/submodule/tournament-game-hub/contracts/tests/TestAlphaKeysFactory.sol:8",
        "version": {
          "withMetadata": "c43e98b631c9c0addac8854aee2b801b904c9b14052fde26e38df4ff889e228c",
          "withoutMetadata": "c43e98b631c9c0addac8854aee2b801b904c9b14052fde26e38df4ff889e228c",
          "linkedWithoutMetadata": "c43e98b631c9c0addac8854aee2b801b904c9b14052fde26e38df4ff889e228c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/submodule/tournament-game-hub/contracts/interfaces/IAlphaKeysFactory.sol:IAlphaKeysFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "registerKeys(address)",
          "getKeysPlayer(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "keys",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TestAlphaKeysFactory",
              "src": "contracts/submodule/tournament-game-hub/contracts/tests/TestAlphaKeysFactory.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/tests/TestHeap.sol:TestHeap": {
        "src": "contracts/submodule/tournament-game-hub/contracts/tests/TestHeap.sol:10",
        "version": {
          "withMetadata": "a2234b0046bb1d37176b26e5c53fd1007187c961a161c7a5452af2fe85aab553",
          "withoutMetadata": "a2234b0046bb1d37176b26e5c53fd1007187c961a161c7a5452af2fe85aab553",
          "linkedWithoutMetadata": "a2234b0046bb1d37176b26e5c53fd1007187c961a161c7a5452af2fe85aab553"
        },
        "inherit": [
          "contracts/submodule/tournament-game-hub/contracts/interfaces/IAddressComparator.sol:IAddressComparator",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "compare(address,address)",
          "setValue(address,uint256)",
          "up(address)",
          "down(address)",
          "push(address)",
          "remove(address)",
          "pop()",
          "size()",
          "allValues()",
          "allPositions()",
          "hasValue(address)",
          "peek()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "values",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestHeap",
              "src": "contracts/submodule/tournament-game-hub/contracts/tests/TestHeap.sol:13"
            },
            {
              "label": "heap",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(AddressHeap)14629_storage",
              "contract": "TestHeap",
              "src": "contracts/submodule/tournament-game-hub/contracts/tests/TestHeap.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressHeap)14629_storage": {
              "label": "struct Heap.AddressHeap",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "comparator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "size",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/tests/TestSet.sol:TestSet": {
        "src": "contracts/submodule/tournament-game-hub/contracts/tests/TestSet.sol:10",
        "version": {
          "withMetadata": "f35aead0749a7b2de7c8bcfe9b6619640f44a1f8d2cc0231aa6588e99d135efe",
          "withoutMetadata": "f35aead0749a7b2de7c8bcfe9b6619640f44a1f8d2cc0231aa6588e99d135efe",
          "linkedWithoutMetadata": "f35aead0749a7b2de7c8bcfe9b6619640f44a1f8d2cc0231aa6588e99d135efe"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "insert(address)",
          "erase(address)",
          "hasValue(address)",
          "isEmpty()",
          "size()",
          "allValues()",
          "allPositions()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "set",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(AddressSet)15218_storage",
              "contract": "TestSet",
              "src": "contracts/submodule/tournament-game-hub/contracts/tests/TestSet.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)15218_storage": {
              "label": "struct Set.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/tests/TestSignature.sol:TestSignature": {
        "src": "contracts/submodule/tournament-game-hub/contracts/tests/TestSignature.sol:8",
        "version": {
          "withMetadata": "1a0e8280e7b4b60313bcf38f5f0c62028eec94d6db0853e4bb11072839f0d472",
          "withoutMetadata": "1a0e8280e7b4b60313bcf38f5f0c62028eec94d6db0853e4bb11072839f0d472",
          "linkedWithoutMetadata": "1a0e8280e7b4b60313bcf38f5f0c62028eec94d6db0853e4bb11072839f0d472"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyEthSignature(address,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/submodule/tournament-game-hub/contracts/tests/TestToken.sol:TestToken": {
        "src": "contracts/submodule/tournament-game-hub/contracts/tests/TestToken.sol:6",
        "version": {
          "withMetadata": "b4e1c1a3885d34d532df7635a253a920daca482a11a2d95b61cbe0e289390241",
          "withoutMetadata": "b4e1c1a3885d34d532df7635a253a920daca482a11a2d95b61cbe0e289390241",
          "linkedWithoutMetadata": "b4e1c1a3885d34d532df7635a253a920daca482a11a2d95b61cbe0e289390241"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:IERC5267Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mintFor(address[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
            },
            {
              "label": "_hashedName",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
              "renamedFrom": "_HASHED_NAME"
            },
            {
              "label": "_hashedVersion",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
              "renamedFrom": "_HASHED_VERSION"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "103",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "104",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)48_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)2246_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)2246_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)2246_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "withoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "linkedWithoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "withoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "linkedWithoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHit": {
        "src": "contracts/AsyncKnifeHit.sol:32",
        "version": {
          "withMetadata": "b1c2fbc9e9d5bda5b130d5739c553b1f5035317b32466a10a0ba3d515a6fe365",
          "withoutMetadata": "b1c2fbc9e9d5bda5b130d5739c553b1f5035317b32466a10a0ba3d515a6fe365",
          "linkedWithoutMetadata": "b1c2fbc9e9d5bda5b130d5739c553b1f5035317b32466a10a0ba3d515a6fe365"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage",
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,uint8)",
          "version()",
          "getMatch(uint64)",
          "getMatches(uint64[])",
          "getGameConfig()",
          "getPlayingMatchDataOf(address)",
          "getEndMatchDataOf(address)",
          "getEndMatchesOf(address)",
          "getPlayingMatchesOf(address)",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2047_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:17"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)2544_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:19"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)2544_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:21"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)2544_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:22"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)2168_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:24"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "26",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "feePercentage",
              "offset": 20,
              "slot": "26",
              "type": "t_uint8",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:27"
            },
            {
              "label": "matchNumber",
              "offset": 21,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:29"
            },
            {
              "label": "_initialized",
              "offset": 29,
              "slot": "26",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 30,
              "slot": "26",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "27",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "77",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "78",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "127",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "128",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "177",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "178",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)2177_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(GamePhase)2017": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)2544_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2047_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)2168_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)2177_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)2177_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)2047_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2017",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)2544_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage": {
        "src": "contracts/AsyncKnifeHit.sol:16",
        "inherit": [
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2047_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:17"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)2544_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:19"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)2544_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:21"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)2544_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:22"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)2168_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:24"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "26",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "feePercentage",
              "offset": 20,
              "slot": "26",
              "type": "t_uint8",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:27"
            },
            {
              "label": "matchNumber",
              "offset": 21,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)2177_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_enum(GamePhase)2017": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)2544_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)2047_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)2168_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)2177_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)2177_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)2047_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)2017",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)2544_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit": {
        "src": "contracts/interfaces/IAsyncKnifeHit.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getPlayingMatchesOf(address)",
          "getEndMatchesOf(address)",
          "getPlayingMatchDataOf(address)",
          "getEndMatchDataOf(address)",
          "getMatch(uint64)",
          "getMatches(uint64[])",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/KnifeHitLogic.sol:KnifeHitLogic": {
        "src": "contracts/libraries/KnifeHitLogic.sol:5",
        "version": {
          "withMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "withoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "linkedWithoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "revertActionData(uint256,(uint32,uint32,struct KnifeHitLogic.KnifeHitLevelConfig[10]),uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/Set.sol:Set": {
        "src": "contracts/libraries/Set.sol:5",
        "version": {
          "withMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "withoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "linkedWithoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "withoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "linkedWithoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "withoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd",
          "linkedWithoutMetadata": "8ec70ba0b73a52f2a0aaf01ed2ef61bae6fd76e340dd81449c31a56e37787bdd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "0d59dccb692e8452ee8b3133d5806d86fdf55c5264c6912c04f22f98bdac5eb4",
          "withoutMetadata": "0d59dccb692e8452ee8b3133d5806d86fdf55c5264c6912c04f22f98bdac5eb4",
          "linkedWithoutMetadata": "0d59dccb692e8452ee8b3133d5806d86fdf55c5264c6912c04f22f98bdac5eb4"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "f79690d198378484efab2f7aa197ef5a51cc7545b0f7ce444e90e67d00a302b0",
          "withoutMetadata": "f79690d198378484efab2f7aa197ef5a51cc7545b0f7ce444e90e67d00a302b0",
          "linkedWithoutMetadata": "f79690d198378484efab2f7aa197ef5a51cc7545b0f7ce444e90e67d00a302b0"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "3ac911a88be22970c5a7c325dbb90da9cc774186abb415601fceacd144706077",
          "withoutMetadata": "3ac911a88be22970c5a7c325dbb90da9cc774186abb415601fceacd144706077",
          "linkedWithoutMetadata": "3ac911a88be22970c5a7c325dbb90da9cc774186abb415601fceacd144706077"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "6e29c6616667356bfbd6328db1859ad759cc52c190a0935d13ae022e85615706",
          "withoutMetadata": "6e29c6616667356bfbd6328db1859ad759cc52c190a0935d13ae022e85615706",
          "linkedWithoutMetadata": "6e29c6616667356bfbd6328db1859ad759cc52c190a0935d13ae022e85615706"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "1585aae1118578ef4a21a08699789885f57ebba75f0aa186ba4d217ec4e03ebf",
          "withoutMetadata": "1585aae1118578ef4a21a08699789885f57ebba75f0aa186ba4d217ec4e03ebf",
          "linkedWithoutMetadata": "1585aae1118578ef4a21a08699789885f57ebba75f0aa186ba4d217ec4e03ebf"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "378ebd7b67e2c97c04e867f9faa92a9e0e05d6ca2916774c2e7ce246650e0963",
          "withoutMetadata": "378ebd7b67e2c97c04e867f9faa92a9e0e05d6ca2916774c2e7ce246650e0963",
          "linkedWithoutMetadata": "378ebd7b67e2c97c04e867f9faa92a9e0e05d6ca2916774c2e7ce246650e0963"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "7684590306caf69c893005b49e306488072d9940ae720694646b7633db13086e",
          "withoutMetadata": "7684590306caf69c893005b49e306488072d9940ae720694646b7633db13086e",
          "linkedWithoutMetadata": "7684590306caf69c893005b49e306488072d9940ae720694646b7633db13086e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHit": {
        "src": "contracts/AsyncKnifeHit.sol:32",
        "version": {
          "withMetadata": "47fe170b2909214efef156a0d60ce14e9f3d946e458596983984ddabd1fa4371",
          "withoutMetadata": "47fe170b2909214efef156a0d60ce14e9f3d946e458596983984ddabd1fa4371",
          "linkedWithoutMetadata": "47fe170b2909214efef156a0d60ce14e9f3d946e458596983984ddabd1fa4371"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage",
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,uint8)",
          "version()",
          "getMatch(uint64)",
          "getMatches(uint64[])",
          "getGameConfig()",
          "getPlayingMatchDataOf(address)",
          "getEndMatchDataOf(address)",
          "getEndMatchesOf(address)",
          "getPlayingMatchesOf(address)",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3573_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:17"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)4715_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:19"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)4715_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:21"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)4715_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:22"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)3694_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:24"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "26",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "feePercentage",
              "offset": 20,
              "slot": "26",
              "type": "t_uint8",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:27"
            },
            {
              "label": "matchNumber",
              "offset": 21,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:29"
            },
            {
              "label": "_initialized",
              "offset": 29,
              "slot": "26",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 30,
              "slot": "26",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "27",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "77",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "78",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "127",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "128",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "177",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "178",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3703_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(GamePhase)3543": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)4715_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3573_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3694_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3703_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3703_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)3573_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)3543",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)4715_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/AsyncKnifeHit.sol:AsyncKnifeHitStorage": {
        "src": "contracts/AsyncKnifeHit.sol:16",
        "inherit": [
          "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "matches",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3573_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:17"
            },
            {
              "label": "availableMatches",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Uint64Set)4715_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:19"
            },
            {
              "label": "playerPlayingMatches",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Uint64Set)4715_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:21"
            },
            {
              "label": "playerEndedMatches",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Uint64Set)4715_storage)",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:22"
            },
            {
              "label": "gameConfig",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(KnifeHitGameConfig)3694_storage",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:24"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "26",
              "type": "t_address",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:26"
            },
            {
              "label": "feePercentage",
              "offset": 20,
              "slot": "26",
              "type": "t_uint8",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:27"
            },
            {
              "label": "matchNumber",
              "offset": 21,
              "slot": "26",
              "type": "t_uint64",
              "contract": "AsyncKnifeHitStorage",
              "src": "contracts/AsyncKnifeHit.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_struct(KnifeHitLevelConfig)3703_storage)10_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig[10]",
              "numberOfBytes": "640"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_enum(GamePhase)3543": {
              "label": "enum IAsyncKnifeHit.GamePhase",
              "members": [
                "None",
                "Playing",
                "End"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Uint64Set)4715_storage)": {
              "label": "mapping(address => struct Set.Uint64Set)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(KnifeHitMatchData)3573_storage)": {
              "label": "mapping(uint64 => struct IAsyncKnifeHit.KnifeHitMatchData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_uint64)": {
              "label": "mapping(uint64 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(KnifeHitGameConfig)3694_storage": {
              "label": "struct KnifeHitLogic.KnifeHitGameConfig",
              "members": [
                {
                  "label": "gameDuration",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratio",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "configs",
                  "type": "t_array(t_struct(KnifeHitLevelConfig)3703_storage)10_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_struct(KnifeHitLevelConfig)3703_storage": {
              "label": "struct KnifeHitLogic.KnifeHitLevelConfig",
              "members": [
                {
                  "label": "easeType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rotateSpeed",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "knifeCount",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "1"
                },
                {
                  "label": "obstacle",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(KnifeHitMatchData)3573_storage": {
              "label": "struct IAsyncKnifeHit.KnifeHitMatchData",
              "members": [
                {
                  "label": "matchId",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "entry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "winer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "logicVersion",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "3"
                },
                {
                  "label": "gamePhase",
                  "type": "t_enum(GamePhase)3543",
                  "offset": 21,
                  "slot": "3"
                },
                {
                  "label": "playerAddresses",
                  "type": "t_array(t_address)2_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "player1Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "player2Actions",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "playerScore",
                  "type": "t_array(t_uint32)2_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(Uint64Set)4715_storage": {
              "label": "struct Set.Uint64Set",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_uint64)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positions",
                  "type": "t_mapping(t_uint64,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/interfaces/IAsyncKnifeHit.sol:IAsyncKnifeHit": {
        "src": "contracts/interfaces/IAsyncKnifeHit.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "getPlayingMatchesOf(address)",
          "getEndMatchesOf(address)",
          "getPlayingMatchDataOf(address)",
          "getEndMatchDataOf(address)",
          "getMatch(uint64)",
          "getMatches(uint64[])",
          "getGameConfig()",
          "findMatch(address,uint256,uint32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/KnifeHitLogic.sol:KnifeHitLogic": {
        "src": "contracts/libraries/KnifeHitLogic.sol:5",
        "version": {
          "withMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "withoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12",
          "linkedWithoutMetadata": "9981f8ff806567312b61a4245f96895397f1a3ff726c6dd6db9ab93f73c9ed12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "revertActionData(uint256,(uint32,uint32,struct KnifeHitLogic.KnifeHitLevelConfig[10]),uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/MemArray.sol:MemArray": {
        "src": "contracts/libraries/MemArray.sol:4",
        "version": {
          "withMetadata": "680f6fdcd914b9662d57a0aa7b8edf74c0fc100b1d8d0a2acf6f03b64d21a90e",
          "withoutMetadata": "680f6fdcd914b9662d57a0aa7b8edf74c0fc100b1d8d0a2acf6f03b64d21a90e",
          "linkedWithoutMetadata": "680f6fdcd914b9662d57a0aa7b8edf74c0fc100b1d8d0a2acf6f03b64d21a90e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/libraries/Set.sol:Set": {
        "src": "contracts/libraries/Set.sol:5",
        "version": {
          "withMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "withoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69",
          "linkedWithoutMetadata": "03100b15460fd483619836962945a08dc9db5c4067d5c49e1ac582eb6b234f69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "withoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad",
          "linkedWithoutMetadata": "1f8d545d7ca87bcb9912a34680342a49b43b55ccadbd61afdc48dd0ce72f43ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    }
  ]
}